{
  "address": "0x5ADd77fF9267F713765Fd3B0389Ba3bD18987baA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Exercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "setted",
          "type": "bool"
        }
      ],
      "name": "Offer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Participate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawColleteral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPremium",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "buyOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "delistOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "exerciseOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashExercise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "listOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "colleteral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "premiumAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfColleteral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfCA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerEnd",
          "type": "uint256"
        }
      ],
      "name": "offerOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "optionDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "listAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offerEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exercised",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "options",
      "outputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "colleteral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "premiumAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfColleteral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfCA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "participateOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "refundColleteral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "setPriceFeedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x073a4206a167d4ea0d8c60a8ff391931d6ede43b3a56fe3accbef2f87e77a73e",
  "receipt": {
    "to": null,
    "from": "0xa1Aa152c7d13A577F2e38e5611b91fA7Af1704e2",
    "contractAddress": "0x5ADd77fF9267F713765Fd3B0389Ba3bD18987baA",
    "transactionIndex": 3,
    "gasUsed": "4288039",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd723bac11e5150ba9e161ba7d8daeaeb3ac2716516560b639b800403e9fc73de",
    "transactionHash": "0x073a4206a167d4ea0d8c60a8ff391931d6ede43b3a56fe3accbef2f87e77a73e",
    "logs": [],
    "blockNumber": 31838101,
    "cumulativeGasUsed": "4622795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 2,
  "solcInputHash": "bf11eb13d5b016728ff34dc1ec990075",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setted\",\"type\":\"bool\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Participate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawColleteral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPremium\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"buyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"delistOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"listOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"}],\"name\":\"offerOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exercised\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"participateOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"refundColleteral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"setPriceFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyOption(uint256)\":{\"details\":\"change participator address to msg.sender and delist the option from secondary market\",\"params\":{\"optionId\":\"ID of the option\"}},\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"delistOption(uint256)\":{\"details\":\"sets listed field of option to false in option mapping, only callable by the participator\",\"params\":{\"optionId\":\"ID of the option\"}},\"exerciseOption(uint256)\":{\"details\":\"transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\",\"params\":{\"optionId\":\"ID of the option\"}},\"listOption(uint256,address,uint256)\":{\"details\":\"sets listed field of option to true, asset address and amount in option mapping\",\"params\":{\"optionId\":\"ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\"}},\"offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\",\"params\":{\"colleteral\":\"Address of colleteral asset, counterAsset Address of counter asset, \",\"premiumAsset\":\"Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\"}},\"participateOption(uint256)\":{\"details\":\"transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\",\"params\":{\"optionId\":\"ID of the option\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"refundColleteral(uint256)\":{\"details\":\"refund the colleteral only if option is not participated or option expires worthless\",\"params\":{\"optionId\":\"ID of the option\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"withdraw(address,uint256)\":{\"details\":\"transfer the token that option seller should receive\",\"params\":{\"amount\":\"Amount of thw token received\",\"asset\":\"Address of the token to receive\"}},\"withdrawCA(uint256)\":{\"details\":\"transfer the counter asset to initiator only if option is exercised\",\"params\":{\"optionId\":\"ID of the option, receiver Address of buyer of the option  contract\"}},\"withdrawPremium(uint256)\":{\"details\":\"transfers the premium asset if there is a participant in option contract only callable by the option initiator\",\"params\":{\"optionId\":\"ID of the option\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyOption(uint256)\":{\"notice\":\"buy the option from secondary market\"},\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"delistOption(uint256)\":{\"notice\":\"delists the option from secondary market\"},\"exerciseOption(uint256)\":{\"notice\":\"exercies the option\"},\"listOption(uint256,address,uint256)\":{\"notice\":\"list the option in secondary market\"},\"offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"publish an offer for the option contract\"},\"participateOption(uint256)\":{\"notice\":\"participate in option contract by paying the option premium\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"},\"refundColleteral(uint256)\":{\"notice\":\"withdraw colleteral only if no ones participates in offer period or option expires worthless\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw the amount that seller of the option should receive\"},\"withdrawCA(uint256)\":{\"notice\":\"transfers the counter asset to caller\"},\"withdrawPremium(uint256)\":{\"notice\":\"withdraw the option premium \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol\":\"OpWizFlashLoanWithKeepers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The rate mode that the user wants to swap to: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x71a2d4598a4d7f7f34188e2114d7cc2208a372a2d9361c42c744f6d48e7a72cd\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x73185cd3b952eb691bbf2344b3f7a35cf8b67b33c39275e52e12b80436ea1d5c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xf3acc235689aae1094d33bfdf90e60b0c3ae1f12c5f095b8cffb69bc6880765c\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x5cbef109cc9cb31c076796b6a215a17f3257b701ab65ce3e37a50fb9682e2e4c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/OpWiz/OpWizSimple.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IOpWizSimple.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\ncontract OpWizSimple is IOpWizSimple { \\n using Counters for Counters.Counter;\\n    \\n    Counters.Counter private counter;\\n\\n    mapping(uint => Option) public options;\\n    mapping(uint => OptionDetails) public optionDetails;\\n    mapping(address => mapping(address => uint)) public withdrawAllowance;\\n\\n    modifier rejectZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Transaction to address(0)!\\\");\\n        _;\\n    }\\n\\n    modifier optionExists(uint optionId) {\\n        require(options[optionId].colleteral != address(0), \\\"Option does not exists.\\\");\\n        _;\\n    }\\n\\n    modifier onlyParticipant(address from, uint optionId) {\\n        require(from == options[optionId].participant, \\\"D3\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitiator(address from, uint optionId) {\\n        require(from == options[optionId].initiator,  \\\"D2\\\");\\n        _;\\n    }\\n\\n    modifier participated(uint optionId, bool check) {\\n        if (!check){\\n            require(options[optionId].participant == address(0), \\\"D13\\\");\\n        } else {\\n            require(options[optionId].participant != address(0), \\\"D12\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier offerPeriod(uint optionId, bool check) {\\n        require(optionDetails[optionId].offerEnd > 0, \\\"Option paramaters not setted yet\\\");\\n        if (check){\\n            require(optionDetails[optionId].offerEnd >= block.timestamp, \\\"Offer expired\\\");\\n        } else {\\n            require(optionDetails[optionId].offerEnd < block.timestamp, \\\"Offer not expired yet!\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier expired(uint optionId, bool check) {\\n        if (check){\\n            require(optionDetails[optionId].optionExpiry < block.timestamp, \\\"D8\\\");\\n        } else {\\n            require(optionDetails[optionId].optionExpiry >= block.timestamp, \\\"D9\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n    * @notice publish an offer for the option contract\\n    * @dev locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\\n    * @param colleteral Address of colleteral asset, counterAsset Address of counter asset, \\n    * @param premiumAsset Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\\n    */\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external\\n        override \\n        rejectZeroAddress(colleteral)\\n        rejectZeroAddress(counterAsset)\\n        rejectZeroAddress(premiumAsset)\\n    {\\n        IERC20(colleteral).transferFrom(msg.sender, address(this), amountOfColleteral);\\n        counter.increment();\\n        uint index = counter.current();\\n        options[index].colleteral  = colleteral;\\n        Option storage option = options[index];\\n        option.counterAsset = counterAsset;\\n        option.premiumAsset = premiumAsset;\\n        option.amountOfColleteral = amountOfColleteral;\\n        option.premiumAmount = premiumAmount;\\n        option.amountOfCA = amountOfCA;\\n        optionDetails[index].offerEnd = block.timestamp + (offerEnd * 1 days);\\n        optionDetails[index].optionExpiry = block.timestamp + (optionExpiry * 1 days);\\n        option.initiator = msg.sender;\\n        emit Offer(msg.sender, index, true);\\n    }\\n    \\n    /**\\n    * @notice participate in option contract by paying the option premium\\n    * @dev transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\\n    * @param optionId ID of the option\\n    */\\n    function participateOption(uint optionId)  external override {\\n        _participateOption(msg.sender, optionId);\\n        IERC20(options[optionId].premiumAsset).transferFrom(\\n            msg.sender, \\n            address(this),\\n            options[optionId].premiumAmount\\n        );   \\n    }\\n\\n    /**\\n    * @notice withdraw colleteral only if no ones participates in offer period or option expires worthless\\n    * @dev refund the colleteral only if option is not participated or option expires worthless\\n    * @param optionId ID of the option\\n    */\\n    function refundColleteral(uint optionId) \\n        external\\n        override \\n        onlyInitiator(msg.sender, optionId) \\n        offerPeriod(optionId, false) \\n    {\\n        require((options[optionId].participant == address(0) || \\n        (optionDetails[optionId].optionExpiry < block.timestamp && \\n        !optionDetails[optionId].exercised)), \\\"D4\\\");\\n        _transferColleteral(msg.sender, optionId);   \\n    }\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) \\n        external \\n        override \\n        onlyInitiator(msg.sender, optionId) \\n        participated(optionId, true)\\n    {\\n        require(options[optionId].premiumAmount > 0 , \\\"D11\\\");\\n        uint amount = options[optionId].premiumAmount;\\n        options[optionId].premiumAmount = 0;\\n        IERC20(options[optionId].premiumAsset).transfer(msg.sender, amount);\\n        emit WithdrawPremium(msg.sender, optionId, amount);\\n    }\\n\\n    /**\\n    * @notice exercies the option\\n    * @dev transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function exerciseOption(uint optionId) external override onlyParticipant(msg.sender, optionId){\\n        _exerciseOption(optionId);\\n        IERC20(options[optionId].counterAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            options[optionId].amountOfCA\\n        );\\n    }\\n\\n    /**\\n    * @notice list the option in secondary market\\n    * @dev sets listed field of option to true, asset address and amount in option mapping\\n    * @param optionId ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\\n    */\\n    function listOption(\\n        uint optionId, \\n        address asset,\\n        uint amount\\n    ) \\n        external \\n        override \\n        onlyParticipant(msg.sender, optionId)\\n        expired(optionId, false)\\n        rejectZeroAddress(asset)\\n    {\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].isListed = true;\\n        optionDetails[optionId].listAsset = asset;\\n        optionDetails[optionId].listAmount = amount;\\n        emit Listed(optionId, true);\\n    }\\n\\n    /**\\n    * @notice delists the option from secondary market\\n    * @dev sets listed field of option to false in option mapping, only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function delistOption(uint optionId) external override {\\n        _delistOption(msg.sender, optionId);\\n    }\\n\\n    /**\\n    * @notice transfers the counter asset to caller\\n    * @dev transfer the counter asset to initiator only if option is exercised\\n    * @param optionId ID of the option, receiver Address of buyer of the option  contract\\n    */\\n    function withdrawCA(uint optionId) external override onlyInitiator(msg.sender, optionId) {\\n        require(optionDetails[optionId].exercised, \\\"D10\\\");\\n        require(options[optionId].amountOfCA > 0, \\\"D11\\\");\\n        uint amount = options[optionId].amountOfCA;\\n        options[optionId].amountOfCA = 0;\\n        IERC20(options[optionId].counterAsset).transfer(msg.sender, amount);\\n        emit WithdrawCA(msg.sender, optionId, amount);\\n    }\\n\\n    /**\\n    * @notice buy the option from secondary market\\n    * @dev change participator address to msg.sender and delist the option from secondary market\\n    * @param optionId ID of the option\\n    */\\n    function buyOption(uint optionId) external override {\\n         _buyOption(msg.sender ,optionId);\\n        IERC20(optionDetails[optionId].listAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            optionDetails[optionId].listAmount\\n        );\\n    }\\n\\n    /**\\n    * @notice withdraw the amount that seller of the option should receive\\n    * @dev transfer the token that option seller should receive\\n    * @param asset Address of the token to receive\\n    * @param amount Amount of thw token received\\n    */\\n    function withdraw(address asset, uint amount) external override {\\n        require(withdrawAllowance[asset][msg.sender] >= amount, \\\"D15\\\");\\n        withdrawAllowance[asset][msg.sender] -= amount;\\n        IERC20(asset).transfer(msg.sender, amount);\\n        emit Withdraw(asset, msg.sender, amount);\\n    } \\n\\n    function _participateOption(address participator,uint optionId) \\n        internal      \\n        optionExists(optionId) \\n        participated(optionId, false) \\n        offerPeriod(optionId, true)  \\n    {\\n        options[optionId].participant = participator;\\n        optionDetails[optionId].offerEnd = block.timestamp;\\n        emit Participate(participator, optionId);\\n    } \\n\\n    function _transferColleteral(address to, uint optionId) internal {\\n        uint amount = options[optionId].amountOfColleteral;\\n        options[optionId].amountOfColleteral = 0;\\n        IERC20(options[optionId].colleteral).transfer(to, amount);\\n        emit WithdrawColleteral(to, optionId, amount);\\n    }\\n\\n     function _exerciseOption(uint optionId) \\n        internal \\n        expired(optionId, false)\\n    {\\n        address to = options[optionId].participant;\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].exercised = true;\\n        _transferColleteral(to ,optionId);\\n        emit Exercise(to, optionId);\\n    }\\n\\n    function _buyOption(address to, uint optionId) \\n        internal \\n        optionExists(optionId) \\n        expired(optionId, false)\\n    {\\n        require(optionDetails[optionId].isListed, \\\"D14\\\");\\n        withdrawAllowance[optionDetails[optionId].listAsset][options[optionId].participant] += optionDetails[optionId].listAmount;\\n        emit Transfer(options[optionId].participant, to, optionId);\\n        options[optionId].participant = to;\\n        _delistOption(to ,optionId);\\n    }\\n\\n    function _delistOption(address participant, uint optionId) \\n        internal\\n        onlyParticipant(participant, optionId) \\n    {\\n        require(optionDetails[optionId].isListed, \\\"D7\\\");\\n        optionDetails[optionId].isListed = false;\\n        emit Listed(optionId, false);\\n    }    \\n}\",\"keccak256\":\"0x33fe1f5b9d628f1406f5833ca354136f74c9f38381cdd811144a4e2bfa88fd49\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOpWizChainlinkCompatible.sol\\\";\\nimport \\\"../interfaces/IOpWizFlashExercise.sol\\\";\\nimport \\\"../OpWizSimple.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\ncontract OpWizFlashLoanWithKeepers is IERC165, OpWizSimple, IOpWizChainlinkCompatible, IOpWizFlashExercise {\\n    mapping(address => uint) private lastBalances;\\n\\n    address immutable public swapRouter;\\n\\n    constructor(address _swapRouter){\\n        swapRouter = _swapRouter;\\n    }\\n \\n    function flashExercise(\\n        uint optionId, \\n        uint minAmount,\\n        bytes calldata params\\n    ) \\n        external \\n        onlyParticipant(msg.sender, optionId)\\n        expired(optionId, false)\\n    {   \\n       _flashExercise(optionId, minAmount, params);\\n    }\\n\\n    function setPriceFeedAddress(uint optionId, address _priceFeedAddress) external override onlyParticipant(msg.sender, optionId){\\n        optionDetails[optionId].priceFeedAddress = _priceFeedAddress;\\n    }\\n\\n    /**\\n    * @notice method that is simulated by the keepers to see if any work actually\\n    * needs to be performed. This method does does not actually need to be\\n    * executable, and since it is only ever simulated it can consume lots of gas.\\n    * @dev To ensure that it is never called, you may want to add the\\n    * cannotExecute modifier from KeeperBase to your implementation of this\\n    * method.\\n    * @param checkData specified in the upkeep registration so it is always the\\n    * same for a registered upkeep. This can easily be broken down into specific\\n    * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n    * same contract and easily differentiated by the contract.\\n    * @return upkeepNeeded boolean to indicate whether the keeper should call\\n    * performUpkeep or not.\\n    * @return performData bytes that the keeper should call performUpkeep with, if\\n    * upkeep is needed. If you would like to encode data to decode later, try\\n    * `abi.encode`.\\n    */\\n    function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData){\\n        (uint optionId, int strikePrice) = abi.decode(checkData[:64],(uint, int)); \\n        (    /*uint80 roundID*/,\\n            int price, \\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        )= AggregatorV3Interface(optionDetails[optionId].priceFeedAddress).latestRoundData();\\n        return (price >= strikePrice , checkData);\\n    }\\n\\n    /**\\n    * @notice method that is actually executed by the keepers, via the registry.\\n    * The data returned by the checkUpkeep simulation will be passed into\\n    * this method to actually be executed.\\n    * @dev The input to this method should not be trusted, and the caller of the\\n    * method should not even be restricted to any single registry. Anyone should\\n    * be able call it, and the input should be validated, there is no guarantee\\n    * that the data passed in is the performData returned from checkUpkeep. This\\n    * could happen due to malicious keepers, racing keepers, or simply a state\\n    * change while the performUpkeep transaction is waiting for confirmation.\\n    * Always validate the data passed in.\\n    * @param performData is the data which was passed back from the checkData\\n    * simulation. If it is encoded, it can easily be decoded into other types by\\n    * calling `abi.decode`. This data should not be trusted, and should be\\n    * validated against the contract's current state.\\n    */\\n    function performUpkeep(bytes calldata performData) external override {\\n       (uint optionId, uint strikePrice) = abi.decode(performData[:64],(uint, uint)); \\n        (    /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        )= AggregatorV3Interface(optionDetails[optionId].priceFeedAddress).latestRoundData();\\n        \\n        require(uint(price) > strikePrice, \\\"Option is OTM\\\");\\n        (bool isFlashExercise) = abi.decode(performData[64:66],(bool)); \\n        if (isFlashExercise){\\n            _flashExercise(\\n                optionId, \\n                (options[optionId].amountOfColleteral * strikePrice), \\n                performData[66:]\\n            );\\n        } else  {\\n            IERC20(options[optionId].counterAsset).transferFrom(\\n            options[optionId].participant, \\n            address(this), \\n            options[optionId].amountOfCA\\n        );\\n            _exerciseOption(optionId);\\n        }\\n    }\\n\\n     /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return interfaceId == this.supportsInterface.selector || \\n               interfaceId == this.checkUpkeep.selector ^ this.performUpkeep.selector;\\n\\n    }\\n\\n    function _flashExercise(uint optionId, uint minAmount, bytes calldata params) internal participated(optionId, true) expired(optionId, false){\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].exercised = true;\\n        Option storage option = options[optionId];\\n        (\\n            uint24 fee,\\n            uint160 sqrtPriceLimitX96\\n        \\n        ) = abi.decode(params, (uint24, uint160));\\n        lastBalances[option.counterAsset] = _getBalance(option.counterAsset, address(this));\\n        uint amountOfColleteral = option.amountOfColleteral;\\n        option.amountOfColleteral = 0;\\n        IERC20(option.colleteral).approve(swapRouter, amountOfColleteral);\\n        ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: option.colleteral,\\n            tokenOut: option.counterAsset, \\n            fee: fee, \\n            recipient: address(this), \\n            deadline: block.timestamp + 10, \\n            amountIn: amountOfColleteral, \\n            amountOutMinimum: minAmount, \\n            sqrtPriceLimitX96: sqrtPriceLimitX96\\n        });\\n\\n        uint256 receivedAmount = ISwapRouter(swapRouter).exactInputSingle(swapParams);\\n        require((receivedAmount - option.amountOfCA) > 0 , \\\"No profits gained\\\");\\n        uint256 currentBalance = _getBalance(option.counterAsset, address(this));\\n        require(currentBalance > lastBalances[option.counterAsset], \\\"No profits gained\\\");\\n        withdrawAllowance[option.counterAsset][option.participant] += (receivedAmount - option.amountOfCA);\\n        emit Exercise(option.participant, optionId);\\n    }\\n\\n    function _getBalance(address token, address account) internal view returns(uint256 amount){\\n        (bool success, bytes memory data) =\\n        token.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, account));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n}\",\"keccak256\":\"0x27fea9d720992b1587936ca7104ac145f816179d3c2d2b069ff84acdad4e2781\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/interfaces/IOpWizChainlinkCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"./IOpWizSimple.sol\\\";\\n\\n/**\\n* @title Interface of the OptionWizard contract\\n* @author Ege Caner\\n */\\ninterface IOpWizChainlinkCompatible is IOpWizSimple, KeeperCompatibleInterface {\\n   \\n    function setPriceFeedAddress(uint optionId, address _priceFeedAddress) external;\\n\\n}\",\"keccak256\":\"0x55550b40485f2843beb5701856932484694767c4177260ed7243c25fea062686\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/interfaces/IOpWizFlashExercise.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOpWizSimple.sol\\\";\\n\\ninterface IOpWizFlashExercise is IOpWizSimple {\\n\\n    function flashExercise(\\n        uint optionId,\\n        uint minPrice,\\n        bytes calldata params\\n    ) external;\\n\\n}\",\"keccak256\":\"0x5f0e3a95092381ee7cdc302a9d13f3ddfebccb6c64e16151eba06a1421cb9aa3\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/interfaces/IOpWizSimple.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\n/**\\n* @title Interface of the OptionWizard contract\\n* @author Ege Caner\\n */\\ninterface IOpWizSimple {\\n\\n    struct Option { \\n        address initiator; \\n        address participant;\\n        address colleteral;\\n        address counterAsset;\\n        address premiumAsset;\\n        uint amountOfColleteral;\\n        uint amountOfCA;\\n        uint premiumAmount; \\n    }\\n\\n    struct OptionDetails {\\n        address listAsset;\\n        address priceFeedAddress;\\n        address poolAddress;\\n        uint offerEnd;\\n        uint optionExpiry;\\n        uint listAmount;\\n        bool isListed;\\n        bool exercised;\\n    }\\n\\n    event Offer(\\n       address indexed initiator,\\n       uint indexed optionId,\\n       bool setted\\n    );\\n    \\n    event Participate(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Exercise(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint indexed optionId\\n    );\\n\\n    event Listed(\\n        uint optionId,\\n        bool isListed\\n    );\\n\\n    event WithdrawCA(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawPremium(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawColleteral(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event Withdraw(\\n        address asset,\\n        address to,\\n        uint amount\\n    );\\n\\n    /**\\n    * @notice publish an offer for the option contract\\n    * @dev locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\\n    * @param colleteral Address of colleteral asset, counterAsset Address of counter asset, \\n    * @param premiumAsset Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\\n    */\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external;\\n    \\n    /**\\n    * @notice participate in option contract by paying the option premium\\n    * @dev transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\\n    * @param optionId ID of the option\\n    */\\n    function participateOption(uint optionId)  external;\\n\\n    /**\\n    * @notice withdraw colleteral only if no ones participates in offer period or option expires worthless\\n    * @dev refund the colleteral only if option is not participated or option expires worthless\\n    * @param optionId ID of the option\\n    */\\n    function refundColleteral(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) external;\\n\\n    /**\\n    * @notice exercies the option\\n    * @dev transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\\n    * @dev if asset type is not ERC20 handle this functionality with receive hooks using calldata\\n    * @param optionId ID of the option\\n    */\\n    function exerciseOption(uint optionId) external;\\n\\n    /**\\n    * @notice list the option in secondary market\\n    * @dev sets listed field of option to true, asset address and amount in option mapping\\n    * @param optionId ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\\n    */\\n    function listOption(\\n        uint optionId, \\n        address asset,\\n        uint amount\\n    ) \\n        external;\\n\\n    /**\\n    * @notice delists the option from secondary market\\n    * @dev sets listed field of option to false in option mapping, only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function delistOption(uint optionId) external;\\n\\n    /**\\n    * @notice transfers the counter asset to caller\\n    * @dev transfer the counter asset to initiator only if option is exercised\\n    * @param optionId ID of the option, receiver Address of buyer of the option  contract\\n    */\\n    function withdrawCA(uint optionId) external;\\n\\n    /**\\n    * @notice buy the option from secondary market\\n    * @dev change participator address to msg.sender and delist the option from secondary market\\n    * @dev If asset type is  not ERC20 revert and handle this functionality using receive hooks\\n    * @param optionId ID of the option\\n    */\\n    function buyOption(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the amount that seller of the option should receive\\n    * @dev transfer the token that option seller should receive\\n    * @param asset Address of the token to receive\\n    * @param amount Amount of thw token received\\n    */\\n    function withdraw(address asset, uint amount) external;\\n\\n}\",\"keccak256\":\"0x9f69113cffcde4ac9933d3ed012606c459c97b3f596e841ea7b62b46b26e39c5\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004e3338038062004e338339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051614cfb6200013860003960008181611a94015281816125a501526127190152614cfb6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806357620cdf116100ad578063c31c9c0711610071578063c31c9c0714610321578063f3fef3a31461033f578063f52f25261461035b578063f81cba0514610377578063fba225b91461039357610121565b806357620cdf14610280578063605142051461029c5780636e04ff0d146102b85780637f8368da146102e9578063b91916a61461030557610121565b8063233ac008116100f4578063233ac008146101c557806329a2755c146101f55780633ea73cc714610211578063409e22051461022d5780634585e33b1461026457610121565b806301ffc9a714610126578063065170f414610156578063155295c71461018d5780631f01664a146101a9575b600080fd5b610140600480360381019061013b9190613813565b6103af565b60405161014d919061385b565b60405180910390f35b610170600480360381019061016b91906138ac565b610458565b604051610184989796959493929190613929565b60405180910390f35b6101a760048036038101906101a29190613a0c565b61051a565b005b6101c360048036038101906101be91906138ac565b610696565b005b6101df60048036038101906101da9190613aac565b610a1d565b6040516101ec9190613aec565b60405180910390f35b61020f600480360381019061020a91906138ac565b610a42565b005b61022b60048036038101906102269190613b07565b610a4f565b005b610247600480360381019061024291906138ac565b610b50565b60405161025b989796959493929190613b47565b60405180910390f35b61027e60048036038101906102799190613bc5565b610c38565b005b61029a600480360381019061029591906138ac565b610ed2565b005b6102b660048036038101906102b191906138ac565b610fac565b005b6102d260048036038101906102cd9190613bc5565b61123b565b6040516102e0929190613cab565b60405180910390f35b61030360048036038101906102fe9190613cdb565b611371565b005b61031f600480360381019061031a9190613d91565b611774565b005b610329611a92565b6040516103369190613de4565b60405180910390f35b61035960048036038101906103549190613dff565b611ab6565b005b610375600480360381019061037091906138ac565b611cc6565b005b610391600480360381019061038c91906138ac565b611e47565b005b6103ad60048036038101906103a891906138ac565b612108565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104515750634585e33b60e01b636e04ff0d60e01b187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16905088565b33846001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b790613e9c565b60405180910390fd5b85600080156106265742600260008481526020019081526020016000206004015410610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613f08565b60405180910390fd5b610680565b426002600084815260200190815260200160002060040154101561067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067690613f74565b60405180910390fd5b5b61068c888888886121e2565b5050505050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390613fe0565b60405180910390fd5b826001806107ee57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e09061404c565b60405180910390fd5b610895565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b906140b8565b60405180910390fd5b5b60006001600087815260200190815260200160002060070154116108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590614124565b60405180910390fd5b600060016000878152602001908152602001600020600701549050600060016000888152602001908152602001600020600701819055506001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610996929190614144565b6020604051808303816000875af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190614199565b507f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610a0d939291906141c6565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610a4c3382612a41565b50565b33826001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec90613e9c565b60405180910390fd5b826002600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070154905088565b6000808383600090604092610c4f93929190614207565b810190610c5c9190614242565b9150915060006002600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d07919061430f565b505050915050818111610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d46906143d6565b60405180910390fd5b60008585604090604292610d6593929190614207565b810190610d72919061440b565b90508015610dbd57610db884846001600088815260200190815260200160002060050154610da09190614467565b88886042908092610db393929190614207565b6121e2565b610eca565b6001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163060016000898152602001908152602001600020600601546040518463ffffffff1660e01b8152600401610e7c939291906144c1565b6020604051808303816000875af1158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190614199565b50610ec984612bb9565b5b505050505050565b610edc3382612d9b565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610f65939291906144c1565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190614199565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611052576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104990613fe0565b60405180910390fd5b6002600084815260200190815260200160002060060160019054906101000a900460ff166110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac90614544565b60405180910390fd5b600060016000858152602001908152602001600020600601541161110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590614124565b60405180910390fd5b600060016000858152602001908152602001600020600601549050600060016000868152602001908152602001600020600601819055506001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016111b6929190614144565b6020604051808303816000875af11580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190614199565b507fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161122d939291906141c6565b60405180910390a150505050565b60006060600080858560009060409261125693929190614207565b8101906112639190614579565b9150915060006002600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061430f565b50505091505081811215878781818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090509050945094505050509250929050565b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d990614605565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144a90614605565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bb90614605565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401611501939291906144c1565b6020604051808303816000875af1158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115449190614199565b5061154f6000613171565b600061155b6000613187565b90508b6001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001600083815260200190815260200160002090508b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089816005018190555087816007018190555088816006018190555062015180866116799190614467565b426116849190614625565b600260008481526020019081526020016000206003018190555062015180876116ad9190614467565b426116b89190614625565b6002600084815260200190815260200160002060040181905550338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550813373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161175d919061385b565b60405180910390a350505050505050505050505050565b33836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181190613e9c565b60405180910390fd5b8460008015611880574260026000848152602001908152602001600020600401541061187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290613f08565b60405180910390fd5b6118da565b42600260008481526020019081526020016000206004015410156118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613f74565b60405180910390fd5b5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194290614605565b60405180910390fd5b6002600089815260200190815260200160002060060160019054906101000a900460ff16156119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a6906146c7565b60405180910390fd5b6001600260008a815260200190815260200160002060060160006101000a81548160ff02191690831515021790555086600260008a815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008a8152602001908152602001600020600501819055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c886001604051611a809291906146e7565b60405180910390a15050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6c9061475c565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c01919061477c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611c43929190614144565b6020604051808303816000875af1158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190614199565b507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb823383604051611cba939291906144c1565b60405180910390a15050565b33816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6390613e9c565b60405180910390fd5b611d7583612bb9565b6001600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000888152602001908152602001600020600601546040518463ffffffff1660e01b8152600401611dfe939291906144c1565b6020604051808303816000875af1158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e419190614199565b50505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee490613fe0565b60405180910390fd5b82600080600260008481526020019081526020016000206003015411611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f906147fc565b60405180910390fd5b8015611fac574260026000848152602001908152602001600020600301541015611fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9e90614868565b60405180910390fd5b612005565b42600260008481526020019081526020016000206003015410612004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffb906148d4565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120b857504260026000878152602001908152602001600020600401541080156120b757506002600086815260200190815260200160002060060160019054906101000a900460ff16155b5b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614940565b60405180910390fd5b6121013386613195565b5050505050565b61211233826132c1565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600501546040518463ffffffff1660e01b815260040161219b939291906144c1565b6020604051808303816000875af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190614199565b5050565b8360018061229457600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461228f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122869061404c565b60405180910390fd5b61233b565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612331906140b8565b60405180910390fd5b5b85600080156123a1574260026000848152602001908152602001600020600401541061239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239390613f08565b60405180910390fd5b6123fb565b42600260008481526020019081526020016000206004015410156123fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f190613f74565b60405180910390fd5b5b6002600089815260200190815260200160002060060160019054906101000a900460ff161561245f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612456906146c7565b60405180910390fd5b6001600260008a815260200190815260200160002060060160016101000a81548160ff0219169083151502179055506000600160008a8152602001908152602001600020905060008088888101906124b791906149c7565b915091506124e98360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630613697565b600460008560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600083600501549050600084600501819055508360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016125e2929190614144565b6020604051808303816000875af1158015612601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126259190614199565b5060006040518061010001604052808660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600a426126e89190614625565b81526020018381526020018d81526020018473ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389836040518263ffffffff1660e01b81526004016127709190614ae5565b6020604051808303816000875af115801561278f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b39190614b01565b905060008660060154826127c7919061477c565b11612807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fe90614b7a565b60405180910390fd5b60006128378760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630613697565b9050600460008860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116128de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d590614b7a565b60405180910390fd5b8660060154826128ee919061477c565b600360008960030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129c19190614625565b925050819055508e8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a3505050505050505050505050505050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade90613e9c565b60405180910390fd5b6002600084815260200190815260200160002060060160009054906101000a900460ff16612b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b41906146c7565b60405180910390fd5b60006002600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612bab9291906146e7565b60405180910390a150505050565b8060008015612c1f5742600260008481526020019081526020016000206004015410612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1190613f08565b60405180910390fd5b612c79565b4260026000848152602001908152602001600020600401541015612c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6f90613f74565b60405180910390fd5b5b60006001600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506002600085815260200190815260200160002060060160019054906101000a900460ff1615612d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0f906146c7565b60405180910390fd5b60016002600086815260200190815260200160002060060160016101000a81548160ff021916908315150217905550612d518185613195565b838173ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a350505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3990614be6565b60405180910390fd5b81600080612ef457600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee69061404c565b60405180910390fd5b612f9b565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f91906140b8565b60405180910390fd5b5b8360016000600260008481526020019081526020016000206003015411612ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fee906147fc565b60405180910390fd5b801561305b574260026000848152602001908152602001600020600301541015613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d90614868565b60405180910390fd5b6130b4565b426002600084815260200190815260200160002060030154106130b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130aa906148d4565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060030181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600060016000838152602001908152602001600020600501549050600060016000848152602001908152602001600020600501819055506001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161323d929190614144565b6020604051808303816000875af115801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190614199565b507f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc8383836040516132b4939291906141c6565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335f90614be6565b60405180910390fd5b81600080156133ce57426002600084815260200190815260200160002060040154106133c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133c090613f08565b60405180910390fd5b613428565b4260026000848152602001908152602001600020600401541015613427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341e90613f74565b60405180910390fd5b5b6002600085815260200190815260200160002060060160009054906101000a900460ff1661348b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348290614c52565b60405180910390fd5b6002600085815260200190815260200160002060050154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135999190614625565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506136908585612a41565b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b856040516024016136cc9190613de4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516137369190614cae565b600060405180830381855afa9150503d8060008114613771576040519150601f19603f3d011682016040523d82523d6000602084013e613776565b606091505b509150915081801561378a57506020815110155b61379357600080fd5b808060200190518101906137a79190614b01565b9250505092915050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6137f0816137bb565b81146137fb57600080fd5b50565b60008135905061380d816137e7565b92915050565b600060208284031215613829576138286137b1565b5b6000613837848285016137fe565b91505092915050565b60008115159050919050565b61385581613840565b82525050565b6000602082019050613870600083018461384c565b92915050565b6000819050919050565b61388981613876565b811461389457600080fd5b50565b6000813590506138a681613880565b92915050565b6000602082840312156138c2576138c16137b1565b5b60006138d084828501613897565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613904826138d9565b9050919050565b613914816138f9565b82525050565b61392381613876565b82525050565b60006101008201905061393f600083018b61390b565b61394c602083018a61390b565b613959604083018961390b565b613966606083018861391a565b613973608083018761391a565b61398060a083018661391a565b61398d60c083018561384c565b61399a60e083018461384c565b9998505050505050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126139cc576139cb6139a7565b5b8235905067ffffffffffffffff8111156139e9576139e86139ac565b5b602083019150836001820283011115613a0557613a046139b1565b5b9250929050565b60008060008060608587031215613a2657613a256137b1565b5b6000613a3487828801613897565b9450506020613a4587828801613897565b935050604085013567ffffffffffffffff811115613a6657613a656137b6565b5b613a72878288016139b6565b925092505092959194509250565b613a89816138f9565b8114613a9457600080fd5b50565b600081359050613aa681613a80565b92915050565b60008060408385031215613ac357613ac26137b1565b5b6000613ad185828601613a97565b9250506020613ae285828601613a97565b9150509250929050565b6000602082019050613b01600083018461391a565b92915050565b60008060408385031215613b1e57613b1d6137b1565b5b6000613b2c85828601613897565b9250506020613b3d85828601613a97565b9150509250929050565b600061010082019050613b5d600083018b61390b565b613b6a602083018a61390b565b613b77604083018961390b565b613b84606083018861390b565b613b91608083018761390b565b613b9e60a083018661391a565b613bab60c083018561391a565b613bb860e083018461391a565b9998505050505050505050565b60008060208385031215613bdc57613bdb6137b1565b5b600083013567ffffffffffffffff811115613bfa57613bf96137b6565b5b613c06858286016139b6565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c4c578082015181840152602081019050613c31565b83811115613c5b576000848401525b50505050565b6000601f19601f8301169050919050565b6000613c7d82613c12565b613c878185613c1d565b9350613c97818560208601613c2e565b613ca081613c61565b840191505092915050565b6000604082019050613cc0600083018561384c565b8181036020830152613cd28184613c72565b90509392505050565b600080600080600080600080610100898b031215613cfc57613cfb6137b1565b5b6000613d0a8b828c01613a97565b9850506020613d1b8b828c01613a97565b9750506040613d2c8b828c01613a97565b9650506060613d3d8b828c01613897565b9550506080613d4e8b828c01613897565b94505060a0613d5f8b828c01613897565b93505060c0613d708b828c01613897565b92505060e0613d818b828c01613897565b9150509295985092959890939650565b600080600060608486031215613daa57613da96137b1565b5b6000613db886828701613897565b9350506020613dc986828701613a97565b9250506040613dda86828701613897565b9150509250925092565b6000602082019050613df9600083018461390b565b92915050565b60008060408385031215613e1657613e156137b1565b5b6000613e2485828601613a97565b9250506020613e3585828601613897565b9150509250929050565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e86600283613e3f565b9150613e9182613e50565b602082019050919050565b60006020820190508181036000830152613eb581613e79565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b6000613ef2600283613e3f565b9150613efd82613ebc565b602082019050919050565b60006020820190508181036000830152613f2181613ee5565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b6000613f5e600283613e3f565b9150613f6982613f28565b602082019050919050565b60006020820190508181036000830152613f8d81613f51565b9050919050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b6000613fca600283613e3f565b9150613fd582613f94565b602082019050919050565b60006020820190508181036000830152613ff981613fbd565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b6000614036600383613e3f565b915061404182614000565b602082019050919050565b6000602082019050818103600083015261406581614029565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b60006140a2600383613e3f565b91506140ad8261406c565b602082019050919050565b600060208201905081810360008301526140d181614095565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b600061410e600383613e3f565b9150614119826140d8565b602082019050919050565b6000602082019050818103600083015261413d81614101565b9050919050565b6000604082019050614159600083018561390b565b614166602083018461391a565b9392505050565b61417681613840565b811461418157600080fd5b50565b6000815190506141938161416d565b92915050565b6000602082840312156141af576141ae6137b1565b5b60006141bd84828501614184565b91505092915050565b60006060820190506141db600083018661390b565b6141e8602083018561391a565b6141f5604083018461391a565b949350505050565b600080fd5b600080fd5b6000808585111561421b5761421a6141fd565b5b8386111561422c5761422b614202565b5b6001850283019150848603905094509492505050565b60008060408385031215614259576142586137b1565b5b600061426785828601613897565b925050602061427885828601613897565b9150509250929050565b600069ffffffffffffffffffff82169050919050565b6142a181614282565b81146142ac57600080fd5b50565b6000815190506142be81614298565b92915050565b6000819050919050565b6142d7816142c4565b81146142e257600080fd5b50565b6000815190506142f4816142ce565b92915050565b60008151905061430981613880565b92915050565b600080600080600060a0868803121561432b5761432a6137b1565b5b6000614339888289016142af565b955050602061434a888289016142e5565b945050604061435b888289016142fa565b935050606061436c888289016142fa565b925050608061437d888289016142af565b9150509295509295909350565b7f4f7074696f6e206973204f544d00000000000000000000000000000000000000600082015250565b60006143c0600d83613e3f565b91506143cb8261438a565b602082019050919050565b600060208201905081810360008301526143ef816143b3565b9050919050565b6000813590506144058161416d565b92915050565b600060208284031215614421576144206137b1565b5b600061442f848285016143f6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061447282613876565b915061447d83613876565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144b6576144b5614438565b5b828202905092915050565b60006060820190506144d6600083018661390b565b6144e3602083018561390b565b6144f0604083018461391a565b949350505050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b600061452e600383613e3f565b9150614539826144f8565b602082019050919050565b6000602082019050818103600083015261455d81614521565b9050919050565b600081359050614573816142ce565b92915050565b600080604083850312156145905761458f6137b1565b5b600061459e85828601613897565b92505060206145af85828601614564565b9150509250929050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b60006145ef601a83613e3f565b91506145fa826145b9565b602082019050919050565b6000602082019050818103600083015261461e816145e2565b9050919050565b600061463082613876565b915061463b83613876565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146705761466f614438565b5b828201905092915050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b60006146b1600283613e3f565b91506146bc8261467b565b602082019050919050565b600060208201905081810360008301526146e0816146a4565b9050919050565b60006040820190506146fc600083018561391a565b614709602083018461384c565b9392505050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b6000614746600383613e3f565b915061475182614710565b602082019050919050565b6000602082019050818103600083015261477581614739565b9050919050565b600061478782613876565b915061479283613876565b9250828210156147a5576147a4614438565b5b828203905092915050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b60006147e6602083613e3f565b91506147f1826147b0565b602082019050919050565b60006020820190508181036000830152614815816147d9565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b6000614852600d83613e3f565b915061485d8261481c565b602082019050919050565b6000602082019050818103600083015261488181614845565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b60006148be601683613e3f565b91506148c982614888565b602082019050919050565b600060208201905081810360008301526148ed816148b1565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b600061492a600283613e3f565b9150614935826148f4565b602082019050919050565b600060208201905081810360008301526149598161491d565b9050919050565b600062ffffff82169050919050565b61497881614960565b811461498357600080fd5b50565b6000813590506149958161496f565b92915050565b6149a4816138d9565b81146149af57600080fd5b50565b6000813590506149c18161499b565b92915050565b600080604083850312156149de576149dd6137b1565b5b60006149ec85828601614986565b92505060206149fd858286016149b2565b9150509250929050565b614a10816138f9565b82525050565b614a1f81614960565b82525050565b614a2e81613876565b82525050565b614a3d816138d9565b82525050565b61010082016000820151614a5a6000850182614a07565b506020820151614a6d6020850182614a07565b506040820151614a806040850182614a16565b506060820151614a936060850182614a07565b506080820151614aa66080850182614a25565b5060a0820151614ab960a0850182614a25565b5060c0820151614acc60c0850182614a25565b5060e0820151614adf60e0850182614a34565b50505050565b600061010082019050614afb6000830184614a43565b92915050565b600060208284031215614b1757614b166137b1565b5b6000614b25848285016142fa565b91505092915050565b7f4e6f2070726f66697473206761696e6564000000000000000000000000000000600082015250565b6000614b64601183613e3f565b9150614b6f82614b2e565b602082019050919050565b60006020820190508181036000830152614b9381614b57565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b6000614bd0601783613e3f565b9150614bdb82614b9a565b602082019050919050565b60006020820190508181036000830152614bff81614bc3565b9050919050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b6000614c3c600383613e3f565b9150614c4782614c06565b602082019050919050565b60006020820190508181036000830152614c6b81614c2f565b9050919050565b600081905092915050565b6000614c8882613c12565b614c928185614c72565b9350614ca2818560208601613c2e565b80840191505092915050565b6000614cba8284614c7d565b91508190509291505056fea26469706673582212205766bc938f3b36da43b76333dcb8acbdea95ef3fcaa065f49e5b3f8d18c5afe964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806357620cdf116100ad578063c31c9c0711610071578063c31c9c0714610321578063f3fef3a31461033f578063f52f25261461035b578063f81cba0514610377578063fba225b91461039357610121565b806357620cdf14610280578063605142051461029c5780636e04ff0d146102b85780637f8368da146102e9578063b91916a61461030557610121565b8063233ac008116100f4578063233ac008146101c557806329a2755c146101f55780633ea73cc714610211578063409e22051461022d5780634585e33b1461026457610121565b806301ffc9a714610126578063065170f414610156578063155295c71461018d5780631f01664a146101a9575b600080fd5b610140600480360381019061013b9190613813565b6103af565b60405161014d919061385b565b60405180910390f35b610170600480360381019061016b91906138ac565b610458565b604051610184989796959493929190613929565b60405180910390f35b6101a760048036038101906101a29190613a0c565b61051a565b005b6101c360048036038101906101be91906138ac565b610696565b005b6101df60048036038101906101da9190613aac565b610a1d565b6040516101ec9190613aec565b60405180910390f35b61020f600480360381019061020a91906138ac565b610a42565b005b61022b60048036038101906102269190613b07565b610a4f565b005b610247600480360381019061024291906138ac565b610b50565b60405161025b989796959493929190613b47565b60405180910390f35b61027e60048036038101906102799190613bc5565b610c38565b005b61029a600480360381019061029591906138ac565b610ed2565b005b6102b660048036038101906102b191906138ac565b610fac565b005b6102d260048036038101906102cd9190613bc5565b61123b565b6040516102e0929190613cab565b60405180910390f35b61030360048036038101906102fe9190613cdb565b611371565b005b61031f600480360381019061031a9190613d91565b611774565b005b610329611a92565b6040516103369190613de4565b60405180910390f35b61035960048036038101906103549190613dff565b611ab6565b005b610375600480360381019061037091906138ac565b611cc6565b005b610391600480360381019061038c91906138ac565b611e47565b005b6103ad60048036038101906103a891906138ac565b612108565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104515750634585e33b60e01b636e04ff0d60e01b187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16905088565b33846001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b790613e9c565b60405180910390fd5b85600080156106265742600260008481526020019081526020016000206004015410610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613f08565b60405180910390fd5b610680565b426002600084815260200190815260200160002060040154101561067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067690613f74565b60405180910390fd5b5b61068c888888886121e2565b5050505050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073390613fe0565b60405180910390fd5b826001806107ee57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e09061404c565b60405180910390fd5b610895565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088b906140b8565b60405180910390fd5b5b60006001600087815260200190815260200160002060070154116108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590614124565b60405180910390fd5b600060016000878152602001908152602001600020600701549050600060016000888152602001908152602001600020600701819055506001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610996929190614144565b6020604051808303816000875af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190614199565b507f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610a0d939291906141c6565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610a4c3382612a41565b50565b33826001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec90613e9c565b60405180910390fd5b826002600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070154905088565b6000808383600090604092610c4f93929190614207565b810190610c5c9190614242565b9150915060006002600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d07919061430f565b505050915050818111610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d46906143d6565b60405180910390fd5b60008585604090604292610d6593929190614207565b810190610d72919061440b565b90508015610dbd57610db884846001600088815260200190815260200160002060050154610da09190614467565b88886042908092610db393929190614207565b6121e2565b610eca565b6001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163060016000898152602001908152602001600020600601546040518463ffffffff1660e01b8152600401610e7c939291906144c1565b6020604051808303816000875af1158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190614199565b50610ec984612bb9565b5b505050505050565b610edc3382612d9b565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610f65939291906144c1565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190614199565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611052576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104990613fe0565b60405180910390fd5b6002600084815260200190815260200160002060060160019054906101000a900460ff166110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ac90614544565b60405180910390fd5b600060016000858152602001908152602001600020600601541161110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590614124565b60405180910390fd5b600060016000858152602001908152602001600020600601549050600060016000868152602001908152602001600020600601819055506001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016111b6929190614144565b6020604051808303816000875af11580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190614199565b507fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161122d939291906141c6565b60405180910390a150505050565b60006060600080858560009060409261125693929190614207565b8101906112639190614579565b9150915060006002600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e919061430f565b50505091505081811215878781818080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090509050945094505050509250929050565b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d990614605565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144a90614605565b60405180910390fd5b87600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bb90614605565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308b6040518463ffffffff1660e01b8152600401611501939291906144c1565b6020604051808303816000875af1158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115449190614199565b5061154f6000613171565b600061155b6000613187565b90508b6001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001600083815260200190815260200160002090508b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089816005018190555087816007018190555088816006018190555062015180866116799190614467565b426116849190614625565b600260008481526020019081526020016000206003018190555062015180876116ad9190614467565b426116b89190614625565b6002600084815260200190815260200160002060040181905550338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550813373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161175d919061385b565b60405180910390a350505050505050505050505050565b33836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181190613e9c565b60405180910390fd5b8460008015611880574260026000848152602001908152602001600020600401541061187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290613f08565b60405180910390fd5b6118da565b42600260008481526020019081526020016000206004015410156118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613f74565b60405180910390fd5b5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194290614605565b60405180910390fd5b6002600089815260200190815260200160002060060160019054906101000a900460ff16156119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a6906146c7565b60405180910390fd5b6001600260008a815260200190815260200160002060060160006101000a81548160ff02191690831515021790555086600260008a815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008a8152602001908152602001600020600501819055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c886001604051611a809291906146e7565b60405180910390a15050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6c9061475c565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c01919061477c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611c43929190614144565b6020604051808303816000875af1158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190614199565b507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb823383604051611cba939291906144c1565b60405180910390a15050565b33816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6390613e9c565b60405180910390fd5b611d7583612bb9565b6001600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000888152602001908152602001600020600601546040518463ffffffff1660e01b8152600401611dfe939291906144c1565b6020604051808303816000875af1158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e419190614199565b50505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee490613fe0565b60405180910390fd5b82600080600260008481526020019081526020016000206003015411611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f906147fc565b60405180910390fd5b8015611fac574260026000848152602001908152602001600020600301541015611fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9e90614868565b60405180910390fd5b612005565b42600260008481526020019081526020016000206003015410612004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffb906148d4565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806120b857504260026000878152602001908152602001600020600401541080156120b757506002600086815260200190815260200160002060060160019054906101000a900460ff16155b5b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614940565b60405180910390fd5b6121013386613195565b5050505050565b61211233826132c1565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600501546040518463ffffffff1660e01b815260040161219b939291906144c1565b6020604051808303816000875af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190614199565b5050565b8360018061229457600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461228f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122869061404c565b60405180910390fd5b61233b565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612331906140b8565b60405180910390fd5b5b85600080156123a1574260026000848152602001908152602001600020600401541061239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239390613f08565b60405180910390fd5b6123fb565b42600260008481526020019081526020016000206004015410156123fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f190613f74565b60405180910390fd5b5b6002600089815260200190815260200160002060060160019054906101000a900460ff161561245f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612456906146c7565b60405180910390fd5b6001600260008a815260200190815260200160002060060160016101000a81548160ff0219169083151502179055506000600160008a8152602001908152602001600020905060008088888101906124b791906149c7565b915091506124e98360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630613697565b600460008560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600083600501549050600084600501819055508360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016125e2929190614144565b6020604051808303816000875af1158015612601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126259190614199565b5060006040518061010001604052808660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600a426126e89190614625565b81526020018381526020018d81526020018473ffffffffffffffffffffffffffffffffffffffff16815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389836040518263ffffffff1660e01b81526004016127709190614ae5565b6020604051808303816000875af115801561278f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b39190614b01565b905060008660060154826127c7919061477c565b11612807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fe90614b7a565b60405180910390fd5b60006128378760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630613697565b9050600460008860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116128de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d590614b7a565b60405180910390fd5b8660060154826128ee919061477c565b600360008960030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129c19190614625565b925050819055508e8760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a3505050505050505050505050505050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade90613e9c565b60405180910390fd5b6002600084815260200190815260200160002060060160009054906101000a900460ff16612b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b41906146c7565b60405180910390fd5b60006002600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612bab9291906146e7565b60405180910390a150505050565b8060008015612c1f5742600260008481526020019081526020016000206004015410612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1190613f08565b60405180910390fd5b612c79565b4260026000848152602001908152602001600020600401541015612c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6f90613f74565b60405180910390fd5b5b60006001600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506002600085815260200190815260200160002060060160019054906101000a900460ff1615612d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0f906146c7565b60405180910390fd5b60016002600086815260200190815260200160002060060160016101000a81548160ff021916908315150217905550612d518185613195565b838173ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a350505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3990614be6565b60405180910390fd5b81600080612ef457600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee69061404c565b60405180910390fd5b612f9b565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f91906140b8565b60405180910390fd5b5b8360016000600260008481526020019081526020016000206003015411612ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fee906147fc565b60405180910390fd5b801561305b574260026000848152602001908152602001600020600301541015613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d90614868565b60405180910390fd5b6130b4565b426002600084815260200190815260200160002060030154106130b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130aa906148d4565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060030181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600060016000838152602001908152602001600020600501549050600060016000848152602001908152602001600020600501819055506001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161323d929190614144565b6020604051808303816000875af115801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190614199565b507f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc8383836040516132b4939291906141c6565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335f90614be6565b60405180910390fd5b81600080156133ce57426002600084815260200190815260200160002060040154106133c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133c090613f08565b60405180910390fd5b613428565b4260026000848152602001908152602001600020600401541015613427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161341e90613f74565b60405180910390fd5b5b6002600085815260200190815260200160002060060160009054906101000a900460ff1661348b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348290614c52565b60405180910390fd5b6002600085815260200190815260200160002060050154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135999190614625565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506136908585612a41565b5050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b856040516024016136cc9190613de4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516137369190614cae565b600060405180830381855afa9150503d8060008114613771576040519150601f19603f3d011682016040523d82523d6000602084013e613776565b606091505b509150915081801561378a57506020815110155b61379357600080fd5b808060200190518101906137a79190614b01565b9250505092915050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6137f0816137bb565b81146137fb57600080fd5b50565b60008135905061380d816137e7565b92915050565b600060208284031215613829576138286137b1565b5b6000613837848285016137fe565b91505092915050565b60008115159050919050565b61385581613840565b82525050565b6000602082019050613870600083018461384c565b92915050565b6000819050919050565b61388981613876565b811461389457600080fd5b50565b6000813590506138a681613880565b92915050565b6000602082840312156138c2576138c16137b1565b5b60006138d084828501613897565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613904826138d9565b9050919050565b613914816138f9565b82525050565b61392381613876565b82525050565b60006101008201905061393f600083018b61390b565b61394c602083018a61390b565b613959604083018961390b565b613966606083018861391a565b613973608083018761391a565b61398060a083018661391a565b61398d60c083018561384c565b61399a60e083018461384c565b9998505050505050505050565b600080fd5b600080fd5b600080fd5b60008083601f8401126139cc576139cb6139a7565b5b8235905067ffffffffffffffff8111156139e9576139e86139ac565b5b602083019150836001820283011115613a0557613a046139b1565b5b9250929050565b60008060008060608587031215613a2657613a256137b1565b5b6000613a3487828801613897565b9450506020613a4587828801613897565b935050604085013567ffffffffffffffff811115613a6657613a656137b6565b5b613a72878288016139b6565b925092505092959194509250565b613a89816138f9565b8114613a9457600080fd5b50565b600081359050613aa681613a80565b92915050565b60008060408385031215613ac357613ac26137b1565b5b6000613ad185828601613a97565b9250506020613ae285828601613a97565b9150509250929050565b6000602082019050613b01600083018461391a565b92915050565b60008060408385031215613b1e57613b1d6137b1565b5b6000613b2c85828601613897565b9250506020613b3d85828601613a97565b9150509250929050565b600061010082019050613b5d600083018b61390b565b613b6a602083018a61390b565b613b77604083018961390b565b613b84606083018861390b565b613b91608083018761390b565b613b9e60a083018661391a565b613bab60c083018561391a565b613bb860e083018461391a565b9998505050505050505050565b60008060208385031215613bdc57613bdb6137b1565b5b600083013567ffffffffffffffff811115613bfa57613bf96137b6565b5b613c06858286016139b6565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c4c578082015181840152602081019050613c31565b83811115613c5b576000848401525b50505050565b6000601f19601f8301169050919050565b6000613c7d82613c12565b613c878185613c1d565b9350613c97818560208601613c2e565b613ca081613c61565b840191505092915050565b6000604082019050613cc0600083018561384c565b8181036020830152613cd28184613c72565b90509392505050565b600080600080600080600080610100898b031215613cfc57613cfb6137b1565b5b6000613d0a8b828c01613a97565b9850506020613d1b8b828c01613a97565b9750506040613d2c8b828c01613a97565b9650506060613d3d8b828c01613897565b9550506080613d4e8b828c01613897565b94505060a0613d5f8b828c01613897565b93505060c0613d708b828c01613897565b92505060e0613d818b828c01613897565b9150509295985092959890939650565b600080600060608486031215613daa57613da96137b1565b5b6000613db886828701613897565b9350506020613dc986828701613a97565b9250506040613dda86828701613897565b9150509250925092565b6000602082019050613df9600083018461390b565b92915050565b60008060408385031215613e1657613e156137b1565b5b6000613e2485828601613a97565b9250506020613e3585828601613897565b9150509250929050565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b6000613e86600283613e3f565b9150613e9182613e50565b602082019050919050565b60006020820190508181036000830152613eb581613e79565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b6000613ef2600283613e3f565b9150613efd82613ebc565b602082019050919050565b60006020820190508181036000830152613f2181613ee5565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b6000613f5e600283613e3f565b9150613f6982613f28565b602082019050919050565b60006020820190508181036000830152613f8d81613f51565b9050919050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b6000613fca600283613e3f565b9150613fd582613f94565b602082019050919050565b60006020820190508181036000830152613ff981613fbd565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b6000614036600383613e3f565b915061404182614000565b602082019050919050565b6000602082019050818103600083015261406581614029565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b60006140a2600383613e3f565b91506140ad8261406c565b602082019050919050565b600060208201905081810360008301526140d181614095565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b600061410e600383613e3f565b9150614119826140d8565b602082019050919050565b6000602082019050818103600083015261413d81614101565b9050919050565b6000604082019050614159600083018561390b565b614166602083018461391a565b9392505050565b61417681613840565b811461418157600080fd5b50565b6000815190506141938161416d565b92915050565b6000602082840312156141af576141ae6137b1565b5b60006141bd84828501614184565b91505092915050565b60006060820190506141db600083018661390b565b6141e8602083018561391a565b6141f5604083018461391a565b949350505050565b600080fd5b600080fd5b6000808585111561421b5761421a6141fd565b5b8386111561422c5761422b614202565b5b6001850283019150848603905094509492505050565b60008060408385031215614259576142586137b1565b5b600061426785828601613897565b925050602061427885828601613897565b9150509250929050565b600069ffffffffffffffffffff82169050919050565b6142a181614282565b81146142ac57600080fd5b50565b6000815190506142be81614298565b92915050565b6000819050919050565b6142d7816142c4565b81146142e257600080fd5b50565b6000815190506142f4816142ce565b92915050565b60008151905061430981613880565b92915050565b600080600080600060a0868803121561432b5761432a6137b1565b5b6000614339888289016142af565b955050602061434a888289016142e5565b945050604061435b888289016142fa565b935050606061436c888289016142fa565b925050608061437d888289016142af565b9150509295509295909350565b7f4f7074696f6e206973204f544d00000000000000000000000000000000000000600082015250565b60006143c0600d83613e3f565b91506143cb8261438a565b602082019050919050565b600060208201905081810360008301526143ef816143b3565b9050919050565b6000813590506144058161416d565b92915050565b600060208284031215614421576144206137b1565b5b600061442f848285016143f6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061447282613876565b915061447d83613876565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144b6576144b5614438565b5b828202905092915050565b60006060820190506144d6600083018661390b565b6144e3602083018561390b565b6144f0604083018461391a565b949350505050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b600061452e600383613e3f565b9150614539826144f8565b602082019050919050565b6000602082019050818103600083015261455d81614521565b9050919050565b600081359050614573816142ce565b92915050565b600080604083850312156145905761458f6137b1565b5b600061459e85828601613897565b92505060206145af85828601614564565b9150509250929050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b60006145ef601a83613e3f565b91506145fa826145b9565b602082019050919050565b6000602082019050818103600083015261461e816145e2565b9050919050565b600061463082613876565b915061463b83613876565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146705761466f614438565b5b828201905092915050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b60006146b1600283613e3f565b91506146bc8261467b565b602082019050919050565b600060208201905081810360008301526146e0816146a4565b9050919050565b60006040820190506146fc600083018561391a565b614709602083018461384c565b9392505050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b6000614746600383613e3f565b915061475182614710565b602082019050919050565b6000602082019050818103600083015261477581614739565b9050919050565b600061478782613876565b915061479283613876565b9250828210156147a5576147a4614438565b5b828203905092915050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b60006147e6602083613e3f565b91506147f1826147b0565b602082019050919050565b60006020820190508181036000830152614815816147d9565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b6000614852600d83613e3f565b915061485d8261481c565b602082019050919050565b6000602082019050818103600083015261488181614845565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b60006148be601683613e3f565b91506148c982614888565b602082019050919050565b600060208201905081810360008301526148ed816148b1565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b600061492a600283613e3f565b9150614935826148f4565b602082019050919050565b600060208201905081810360008301526149598161491d565b9050919050565b600062ffffff82169050919050565b61497881614960565b811461498357600080fd5b50565b6000813590506149958161496f565b92915050565b6149a4816138d9565b81146149af57600080fd5b50565b6000813590506149c18161499b565b92915050565b600080604083850312156149de576149dd6137b1565b5b60006149ec85828601614986565b92505060206149fd858286016149b2565b9150509250929050565b614a10816138f9565b82525050565b614a1f81614960565b82525050565b614a2e81613876565b82525050565b614a3d816138d9565b82525050565b61010082016000820151614a5a6000850182614a07565b506020820151614a6d6020850182614a07565b506040820151614a806040850182614a16565b506060820151614a936060850182614a07565b506080820151614aa66080850182614a25565b5060a0820151614ab960a0850182614a25565b5060c0820151614acc60c0850182614a25565b5060e0820151614adf60e0850182614a34565b50505050565b600061010082019050614afb6000830184614a43565b92915050565b600060208284031215614b1757614b166137b1565b5b6000614b25848285016142fa565b91505092915050565b7f4e6f2070726f66697473206761696e6564000000000000000000000000000000600082015250565b6000614b64601183613e3f565b9150614b6f82614b2e565b602082019050919050565b60006020820190508181036000830152614b9381614b57565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b6000614bd0601783613e3f565b9150614bdb82614b9a565b602082019050919050565b60006020820190508181036000830152614bff81614bc3565b9050919050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b6000614c3c600383613e3f565b9150614c4782614c06565b602082019050919050565b60006020820190508181036000830152614c6b81614c2f565b9050919050565b600081905092915050565b6000614c8882613c12565b614c928185614c72565b9350614ca2818560208601613c2e565b80840191505092915050565b6000614cba8284614c7d565b91508190509291505056fea26469706673582212205766bc938f3b36da43b76333dcb8acbdea95ef3fcaa065f49e5b3f8d18c5afe964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyOption(uint256)": {
        "details": "change participator address to msg.sender and delist the option from secondary market",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "delistOption(uint256)": {
        "details": "sets listed field of option to false in option mapping, only callable by the participator",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "exerciseOption(uint256)": {
        "details": "transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "listOption(uint256,address,uint256)": {
        "details": "sets listed field of option to true, asset address and amount in option mapping",
        "params": {
          "optionId": "ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset"
        }
      },
      "offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent",
        "params": {
          "colleteral": "Address of colleteral asset, counterAsset Address of counter asset, ",
          "premiumAsset": "Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised"
        }
      },
      "participateOption(uint256)": {
        "details": "transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "refundColleteral(uint256)": {
        "details": "refund the colleteral only if option is not participated or option expires worthless",
        "params": {
          "optionId": "ID of the option"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "withdraw(address,uint256)": {
        "details": "transfer the token that option seller should receive",
        "params": {
          "amount": "Amount of thw token received",
          "asset": "Address of the token to receive"
        }
      },
      "withdrawCA(uint256)": {
        "details": "transfer the counter asset to initiator only if option is exercised",
        "params": {
          "optionId": "ID of the option, receiver Address of buyer of the option  contract"
        }
      },
      "withdrawPremium(uint256)": {
        "details": "transfers the premium asset if there is a participant in option contract only callable by the option initiator",
        "params": {
          "optionId": "ID of the option"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyOption(uint256)": {
        "notice": "buy the option from secondary market"
      },
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "delistOption(uint256)": {
        "notice": "delists the option from secondary market"
      },
      "exerciseOption(uint256)": {
        "notice": "exercies the option"
      },
      "listOption(uint256,address,uint256)": {
        "notice": "list the option in secondary market"
      },
      "offerOption(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "publish an offer for the option contract"
      },
      "participateOption(uint256)": {
        "notice": "participate in option contract by paying the option premium"
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      },
      "refundColleteral(uint256)": {
        "notice": "withdraw colleteral only if no ones participates in offer period or option expires worthless"
      },
      "withdraw(address,uint256)": {
        "notice": "withdraw the amount that seller of the option should receive"
      },
      "withdrawCA(uint256)": {
        "notice": "transfers the counter asset to caller"
      },
      "withdrawPremium(uint256)": {
        "notice": "withdraw the option premium "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4126,
        "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
        "label": "counter",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)1930_storage"
      },
      {
        "astId": 4131,
        "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
        "label": "options",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Option)6096_storage)"
      },
      {
        "astId": 4136,
        "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
        "label": "optionDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(OptionDetails)6113_storage)"
      },
      {
        "astId": 4142,
        "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
        "label": "withdrawAllowance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5372,
        "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
        "label": "lastBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Option)6096_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOpWizSimple.Option)",
        "numberOfBytes": "32",
        "value": "t_struct(Option)6096_storage"
      },
      "t_mapping(t_uint256,t_struct(OptionDetails)6113_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOpWizSimple.OptionDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(OptionDetails)6113_storage"
      },
      "t_struct(Counter)1930_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1929,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Option)6096_storage": {
        "encoding": "inplace",
        "label": "struct IOpWizSimple.Option",
        "members": [
          {
            "astId": 6081,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "initiator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6083,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "participant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6085,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "colleteral",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6087,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "counterAsset",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6089,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "premiumAsset",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6091,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "amountOfColleteral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6093,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "amountOfCA",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6095,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "premiumAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(OptionDetails)6113_storage": {
        "encoding": "inplace",
        "label": "struct IOpWizSimple.OptionDetails",
        "members": [
          {
            "astId": 6098,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "listAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6100,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "priceFeedAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6102,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "poolAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6104,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "offerEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6106,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "optionExpiry",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6108,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "listAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6110,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "isListed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 6112,
            "contract": "contracts/OpWiz/extensions/OpWizFlashExerciseWithKeepers.sol:OpWizFlashLoanWithKeepers",
            "label": "exercised",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}