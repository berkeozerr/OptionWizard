{
    "address": "0x044bCaaFc6e70c6f84caE6D5AC01d7e04eb94754",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "participator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "Exercise",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "isListed",
            "type": "bool"
          }
        ],
        "name": "Listed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "initiator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "setted",
            "type": "bool"
          }
        ],
        "name": "Offer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "participator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "Participate",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "asset",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdraw",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "WithdrawCA",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "WithdrawColleteral",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "WithdrawPremium",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "ERC1155_INTERFACE_ID",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ERC721_INTERFACE_ID",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "buyOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "delistOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "exerciseOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "asset",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "indexOfAsset",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "listOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "colleteral",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "counterAsset",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "premiumAsset",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "indexOfColleteral",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "indexOfCA",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "indexOfPremium",
            "type": "uint256"
          }
        ],
        "name": "offerOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "values",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "onERC1155BatchReceived",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "onERC1155Received",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "onERC721Received",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "optionDetails",
        "outputs": [
          {
            "internalType": "address",
            "name": "listAsset",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "indexOfListAsset",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "offerEnd",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "optionExpiry",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "listAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint8",
            "name": "colleteralType",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "counterAssetType",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "listAssetType",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "premiumAssetType",
            "type": "uint8"
          },
          {
            "internalType": "bool",
            "name": "isListed",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "exercised",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "options",
        "outputs": [
          {
            "internalType": "address",
            "name": "initiator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "participant",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "colleteral",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "counterAsset",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "premiumAsset",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "indexOfColleteral",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "indexOfCounter",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "indexOfPremium",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOfColleteral",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOfCA",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "premiumAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "participateOption",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "refundColleteral",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOfColleteral",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amountOfCA",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "premiumAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "optionExpiry",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "offerEnd",
            "type": "uint256"
          }
        ],
        "name": "setOptionParams",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceID",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "asset",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "withdrawAllowance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "withdrawCA",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "optionId",
            "type": "uint256"
          }
        ],
        "name": "withdrawPremium",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0x6bcda4520f70731176b5f2df3e40a3bb843b3010c277599940b5369b5b802014",
    "receipt": {
      "to": null,
      "from": "0xa1Aa152c7d13A577F2e38e5611b91fA7Af1704e2",
      "contractAddress": "0x044bCaaFc6e70c6f84caE6D5AC01d7e04eb94754",
      "transactionIndex": 1,
      "gasUsed": "4959115",
      "logsBloom": "0x
      "blockHash": "0x8a2442ca6efab5a4332425409de73c4695ed7979aa1d0f861804edf4de68f4d0",
      "transactionHash": "0x6bcda4520f70731176b5f2df3e40a3bb843b3010c277599940b5369b5b802014",
      "logs": [],
      "blockNumber": 31740385,
      "cumulativeGasUsed": "5219589",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "b82065cc0451e7128b797d1e0ea9ddc7",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"setted\",\"type\":\"bool\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Participate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawColleteral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPremium\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"buyOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"delistOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexOfAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"listOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfPremium\",\"type\":\"uint256\"}],\"name\":\"offerOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexOfListAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"colleteralType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"counterAssetType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"listAssetType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"premiumAssetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exercised\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colleteral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"premiumAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOfPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"participateOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"refundColleteral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfColleteral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerEnd\",\"type\":\"uint256\"}],\"name\":\"setOptionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyOption(uint256)\":{\"details\":\"change participator address to msg.sender and delist the option from secondary marketIf asset type is  not ERC20 revert and handle this functionality using receive hooks\",\"params\":{\"optionId\":\"ID of the option\"}},\"delistOption(uint256)\":{\"details\":\"sets listed field of option to false in option mapping, only callable by the participator\",\"params\":{\"optionId\":\"ID of the option\"}},\"exerciseOption(uint256)\":{\"details\":\"transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participatorif asset type is not ERC20 handle this functionality with receive hooks using calldata\",\"params\":{\"optionId\":\"ID of the option\"}},\"listOption(uint256,address,uint256,uint256)\":{\"details\":\"sets listed field of option to true, asset address and amount in option mapping\",\"params\":{\"optionId\":\"ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\"}},\"offerOption(address,address,address,uint256,uint256,uint256)\":{\"details\":\"locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\",\"params\":{\"colleteral\":\"Address of colleteral asset, counterAsset Address of counter asset, \",\"premiumAsset\":\"Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"participateOption(uint256)\":{\"details\":\"transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\",\"params\":{\"optionId\":\"ID of the option\"}},\"refundColleteral(uint256)\":{\"details\":\"refund the colleteral only if option is not participated or option expires worthless\",\"params\":{\"optionId\":\"ID of the option\"}},\"withdraw(address,uint256,uint256)\":{\"details\":\"transfer the token that option seller should receive\",\"params\":{\"amount\":\"Amount of thw token received\",\"asset\":\"Address of the token to receive\"}},\"withdrawCA(uint256)\":{\"details\":\"transfer the counter asset to initiator only if option is exercised\",\"params\":{\"optionId\":\"ID of the option, receiver Address of buyer of the option  contract\"}},\"withdrawPremium(uint256)\":{\"details\":\"transfers the premium asset if there is a participant in option contract only callable by the option initiator\",\"params\":{\"optionId\":\"ID of the option\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyOption(uint256)\":{\"notice\":\"buy the option from secondary market\"},\"delistOption(uint256)\":{\"notice\":\"delists the option from secondary market\"},\"exerciseOption(uint256)\":{\"notice\":\"exercies the option\"},\"listOption(uint256,address,uint256,uint256)\":{\"notice\":\"list the option in secondary market\"},\"offerOption(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"publish an offer for the option contract\"},\"participateOption(uint256)\":{\"notice\":\"participate in option contract by paying the option premium\"},\"refundColleteral(uint256)\":{\"notice\":\"withdraw colleteral only if no ones participates in offer period or option expires worthless\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"withdraw the amount that seller of the option should receive\"},\"withdrawCA(uint256)\":{\"notice\":\"transfers the counter asset to caller\"},\"withdrawPremium(uint256)\":{\"notice\":\"withdraw the option premium \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpWiz/OpWiz.sol\":\"OpWiz\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OpWiz/IOpWiz.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n* @title Interface of the OptionWizard contract\\n* @author Ege Caner\\n */\\ninterface IOpWiz is IERC165, IERC1155Receiver, IERC721Receiver{\\n    \\n    enum AssetTypes { ERC20, ERC721, ERC1155 }\\n\\n    struct Option { \\n        address initiator;\\n        address participant;\\n        address colleteral;\\n        address counterAsset;\\n        address premiumAsset;\\n        uint indexOfColleteral;\\n        uint indexOfCounter;\\n        uint indexOfPremium; \\n        uint amountOfColleteral;\\n        uint amountOfCA;\\n        uint premiumAmount; \\n    }\\n\\n    struct OptionDetails {\\n        address listAsset;\\n        uint indexOfListAsset;\\n        uint offerEnd;\\n        uint optionExpiry;\\n        uint listAmount;\\n        uint8 colleteralType;\\n        uint8 counterAssetType;\\n        uint8 listAssetType;\\n        uint8 premiumAssetType;\\n        bool isListed;\\n        bool exercised;\\n    }\\n\\n    event Offer(\\n       address indexed initiator,\\n       uint indexed optionId,\\n       bool setted\\n    );\\n    \\n    event Participate(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Exercise(\\n        address indexed participator,\\n        uint indexed optionId\\n    );\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint indexed optionId\\n    );\\n\\n    event Listed(\\n        uint optionId,\\n        bool isListed\\n    );\\n\\n    event WithdrawCA(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawPremium(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event WithdrawColleteral(\\n        address to,\\n        uint optionId,\\n        uint amount\\n    );\\n\\n    event Withdraw(\\n        address asset,\\n        address to,\\n        uint amount\\n    );\\n\\n    /**\\n    * @notice publish an offer for the option contract\\n    * @dev locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent\\n    * @param colleteral Address of colleteral asset, counterAsset Address of counter asset, \\n    * @param premiumAsset Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised\\n    */\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint indexOfColleteral, \\n        uint indexOfCA, \\n        uint indexOfPremium\\n    ) \\n        external;\\n    \\n    /**\\n    * @notice participate in option contract by paying the option premium\\n    * @dev transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping\\n    * @param optionId ID of the option\\n    */\\n    function participateOption(uint optionId)  external;\\n\\n    /**\\n    * @notice withdraw colleteral only if no ones participates in offer period or option expires worthless\\n    * @dev refund the colleteral only if option is not participated or option expires worthless\\n    * @param optionId ID of the option\\n    */\\n    function refundColleteral(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) external;\\n\\n    /**\\n    * @notice exercies the option\\n    * @dev transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participator\\n    * @dev if asset type is not ERC20 handle this functionality with receive hooks using calldata\\n    * @param optionId ID of the option\\n    */\\n    function exerciseOption(uint optionId) external;\\n\\n    /**\\n    * @notice list the option in secondary market\\n    * @dev sets listed field of option to true, asset address and amount in option mapping\\n    * @param optionId ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset\\n    */\\n    function listOption(\\n        uint optionId, \\n        address asset,\\n        uint indexOfAsset, \\n        uint amount\\n    ) \\n        external;\\n\\n    /**\\n    * @notice delists the option from secondary market\\n    * @dev sets listed field of option to false in option mapping, only callable by the participator\\n    * @param optionId ID of the option\\n    */\\n    function delistOption(uint optionId) external;\\n\\n    /**\\n    * @notice transfers the counter asset to caller\\n    * @dev transfer the counter asset to initiator only if option is exercised\\n    * @param optionId ID of the option, receiver Address of buyer of the option  contract\\n    */\\n    function withdrawCA(uint optionId) external;\\n\\n    /**\\n    * @notice buy the option from secondary market\\n    * @dev change participator address to msg.sender and delist the option from secondary market\\n    * @dev If asset type is  not ERC20 revert and handle this functionality using receive hooks\\n    * @param optionId ID of the option\\n    */\\n    function buyOption(uint optionId) external;\\n\\n    /**\\n    * @notice withdraw the amount that seller of the option should receive\\n    * @dev transfer the token that option seller should receive\\n    * @param asset Address of the token to receive\\n    * @param amount Amount of thw token received\\n    */\\n    function withdraw(\\n        address asset,\\n        uint index,\\n        uint amount\\n    ) external;\\n\\n     function setOptionParams(\\n        uint optionId,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external;\\n\\n}\",\"keccak256\":\"0xa9a9e2f0bccfd3c42fbbd3dca154f7c68ceaaf647b6a5fbaaa20a12169353ea6\",\"license\":\"Unlicensed\"},\"contracts/OpWiz/OpWiz.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"contracts/OpWiz/IOpWiz.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/*\\n* D1 : Asset type is not ERC20 directly transfer asset to this contract with related calldata params\\n* D2 : Only initiator of the option is allowed\\n* D3 : Only participant of the option is allowed\\n* D4 : Colleteral cannot be withdraw conditions not met\\n* D5 : Asset type does not match any standart\\n* D6 : Colleteral asset type is not ERC20\\n* D7 : Option already exercised\\n* D8 : Option not expired\\n* D9 : Option already expired\\n* D10 : Option not exercised\\n* D11 : Nothing to withdraw \\n* D12 : Not participated yet!\\n* D13 : Already participated\\n* D14 : Option is not listed\\n* D15 : Amount exceeds withdraw allowance\\n* D16 : Option params already setted\\n* D19 : Asset does not match\\n* D20 : Insufficient funds\\n* D21 : Invalid mode has been selected\\n* D22 : Index of the asset does not match\\n* D23 : This contract does not support ERC1155 batch receive\\n* D24 : Does not implement ERC1155BatchReceive\\n*/\\n\\ncontract OpWiz is ERC165, IOpWiz {\\n    using Counters for Counters.Counter;\\n    using Address for address;\\n\\n    Counters.Counter private counter;\\n\\n    bytes4 public immutable  ERC721_INTERFACE_ID = 0x80ac58cd;\\n    bytes4 public immutable  ERC1155_INTERFACE_ID = 0xd9b67a26;\\n\\n    mapping(uint => Option) public options;\\n    mapping(uint => OptionDetails) public optionDetails;\\n    mapping(address => mapping(address => uint)) public withdrawAllowance;\\n\\n    modifier rejectZeroAddress(address addr) {\\n        require(addr != address(0), \\\"Transaction to address(0)!\\\");\\n        _;\\n    }\\n\\n    modifier optionExists(uint optionId) {\\n        require(options[optionId].colleteral != address(0), \\\"Option does not exists.\\\");\\n        _;\\n    }\\n\\n    modifier onlyParticipant(address from, uint optionId) {\\n        require(from == options[optionId].participant, \\\"D3\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitiator(address from, uint optionId) {\\n        require(from == options[optionId].initiator,  \\\"D2\\\");\\n        _;\\n    }\\n\\n    modifier participated(uint optionId, bool check) {\\n        if (!check){\\n            require(options[optionId].participant == address(0), \\\"D13\\\");\\n        } else {\\n            require(options[optionId].participant != address(0), \\\"D12\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier offerPeriod(uint optionId, bool check) {\\n        require(optionDetails[optionId].offerEnd > 0, \\\"Option paramaters not setted yet\\\");\\n        if (check){\\n            require(optionDetails[optionId].offerEnd >= block.timestamp, \\\"Offer expired\\\");\\n        } else {\\n            require(optionDetails[optionId].offerEnd < block.timestamp, \\\"Offer not expired yet!\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier expired(uint optionId, bool check) {\\n        if (check){\\n            require(optionDetails[optionId].optionExpiry < block.timestamp, \\\"D8\\\");\\n        } else {\\n            require(optionDetails[optionId].optionExpiry >= block.timestamp, \\\"D9\\\");\\n        }\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n          interfaceID == this.supportsInterface.selector ||\\n          interfaceID == this.onERC721Received.selector\\n                         ^ this.onERC1155Received.selector \\n                         ^ this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function offerOption(\\n        address colleteral,\\n        address counterAsset,\\n        address premiumAsset,\\n        uint indexOfColleteral, \\n        uint indexOfCA, \\n        uint indexOfPremium\\n    ) \\n        external \\n        override\\n        rejectZeroAddress(colleteral)\\n        rejectZeroAddress(counterAsset)\\n        rejectZeroAddress(premiumAsset)\\n    {\\n        counter.increment();\\n        uint index = counter.current();\\n        options[index].colleteral  = colleteral;\\n        Option storage option = options[index];\\n        OptionDetails storage optionDetail = optionDetails[index];\\n        option.counterAsset = counterAsset;\\n        option.premiumAsset = premiumAsset;\\n        option.indexOfColleteral = indexOfColleteral;\\n        option.indexOfCounter = indexOfCA;\\n        option.indexOfPremium = indexOfPremium;\\n        option.initiator = msg.sender;\\n        optionDetail.colleteralType = _determineERCStandart(colleteral);\\n        optionDetail.counterAssetType = _determineERCStandart(counterAsset);\\n        optionDetail.premiumAssetType = _determineERCStandart(premiumAsset);\\n        emit Offer(msg.sender, index, false);\\n    }\\n    \\n    function setOptionParams(\\n        uint optionId,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        external override\\n    {   \\n        require(optionDetails[optionId].colleteralType == uint(AssetTypes.ERC20), \\\"D6\\\");\\n        _setOptionParams(msg.sender, optionId, amountOfColleteral, amountOfCA, premiumAmount, optionExpiry, offerEnd);\\n        IERC20(options[optionId].colleteral).transferFrom(msg.sender, address(this), amountOfColleteral);     \\n    }\\n\\n    function participateOption(uint optionId) external override\\n    {\\n        require(optionDetails[optionId].premiumAssetType == uint(AssetTypes.ERC20), \\\"D1\\\");\\n        _participateOption(msg.sender, optionId);\\n        IERC20(options[optionId].premiumAsset).transferFrom(\\n            msg.sender, \\n            address(this),\\n            options[optionId].premiumAmount\\n        );   \\n    }\\n\\n    function refundColleteral(uint optionId) \\n        external \\n        override\\n        onlyInitiator(msg.sender, optionId) \\n        offerPeriod(optionId, false) \\n    {\\n        require((options[optionId].participant == address(0) || \\n        (optionDetails[optionId].optionExpiry < block.timestamp && \\n        !optionDetails[optionId].exercised)), \\\"D4\\\");\\n        _transferColleteral(msg.sender, optionId);    \\n    }\\n\\n    /**\\n    * @notice withdraw the option premium \\n    * @dev transfers the premium asset if there is a participant in option contract only callable by the option initiator\\n    * @param optionId ID of the option\\n    */\\n    function withdrawPremium(uint optionId) \\n        external \\n        override \\n        onlyInitiator(msg.sender, optionId) \\n        participated(optionId, true)\\n    {\\n        require(options[optionId].premiumAmount > 0 , \\\"D11\\\");\\n        uint amount = options[optionId].premiumAmount;\\n        options[optionId].premiumAmount = 0;\\n        if (optionDetails[optionId].premiumAssetType == uint(AssetTypes.ERC20)) {\\n            IERC20(options[optionId].premiumAsset).transfer(msg.sender, amount);\\n        } else if (optionDetails[optionId].premiumAssetType == uint(AssetTypes.ERC721)) {\\n            IERC721(options[optionId].premiumAsset).safeTransferFrom(\\n                address(this), \\n                msg.sender, \\n                options[optionId].indexOfPremium\\n            );\\n        } else if (optionDetails[optionId].premiumAssetType == uint(AssetTypes.ERC1155)) {\\n            IERC1155(options[optionId].premiumAsset).safeTransferFrom(\\n                address(this), \\n                msg.sender, \\n                options[optionId].indexOfPremium, \\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"D5\\\");\\n        }\\n        emit WithdrawPremium(msg.sender, optionId, amount);\\n    }\\n\\n    function exerciseOption(uint optionId) \\n        external \\n        override \\n    {\\n        require(optionDetails[optionId].counterAssetType ==  uint(AssetTypes.ERC20), \\\"D6\\\");\\n        _exerciseOption(msg.sender ,optionId);\\n        IERC20(options[optionId].counterAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            options[optionId].amountOfCA\\n        );\\n    }\\n\\n    function listOption(\\n        uint optionId, \\n        address asset, \\n        uint indexOfAsset,\\n        uint amount\\n    ) \\n        external \\n        override \\n        onlyParticipant(msg.sender, optionId)\\n        expired(optionId, false)\\n        rejectZeroAddress(asset)\\n    {\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].isListed = true;\\n        optionDetails[optionId].listAsset = asset;\\n        optionDetails[optionId].listAmount = amount;\\n        optionDetails[optionId].indexOfListAsset = indexOfAsset;\\n        optionDetails[optionId].listAssetType = _determineERCStandart(asset);\\n        emit Listed(optionId, true);\\n    }\\n\\n    function delistOption(uint optionId) \\n        public \\n        override \\n    {\\n        _delistOption(msg.sender, optionId);\\n    }\\n\\n    function withdrawCA(uint optionId) \\n        external \\n        override \\n        onlyInitiator(msg.sender, optionId)  \\n    {\\n        require(optionDetails[optionId].exercised, \\\"D10\\\");\\n        require(options[optionId].amountOfCA > 0, \\\"D11\\\");\\n        uint amount = options[optionId].amountOfCA;\\n        options[optionId].amountOfCA = 0;\\n        if (optionDetails[optionId].counterAssetType == uint(AssetTypes.ERC20)) {\\n            IERC20(options[optionId].counterAsset).transfer(msg.sender, amount);\\n        } else if (optionDetails[optionId].counterAssetType == uint(AssetTypes.ERC721)) {\\n            IERC721(options[optionId].counterAsset).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                options[optionId].indexOfCounter\\n            );\\n        } else if (optionDetails[optionId].counterAssetType == uint(AssetTypes.ERC1155)) {\\n            IERC1155(options[optionId].counterAsset).safeTransferFrom(\\n                address(this), \\n                msg.sender, \\n                options[optionId].indexOfCounter, \\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"D5\\\");\\n        }\\n        emit WithdrawCA(msg.sender, optionId, amount);\\n    }\\n\\n    function buyOption(uint optionId) \\n        external \\n        override \\n    {\\n        require(optionDetails[optionId].listAssetType == uint(AssetTypes.ERC20), \\\"D6\\\");\\n        _buyOption(msg.sender ,optionId);\\n        IERC20(optionDetails[optionId].listAsset).transferFrom(\\n            msg.sender, \\n            address(this), \\n            optionDetails[optionId].listAmount\\n        );\\n    }\\n\\n    function withdraw(\\n        address asset,\\n        uint index, \\n        uint amount\\n    ) \\n        external \\n        override \\n    {\\n        require(withdrawAllowance[asset][msg.sender] >= amount, \\\"D15\\\");\\n        withdrawAllowance[asset][msg.sender] -= amount;\\n        uint assetType = _determineERCStandart(asset);\\n        if (assetType == uint(AssetTypes.ERC20)) {\\n            IERC20(asset).transfer(msg.sender, amount);\\n        } else if (assetType == uint(AssetTypes.ERC721)) {\\n            IERC721(asset).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                index\\n            );\\n        } else if (assetType == uint(AssetTypes.ERC1155)) {\\n            IERC1155(asset).safeTransferFrom(\\n                address(this), \\n                msg.sender, \\n                index, \\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"D5\\\");\\n        }\\n        emit Withdraw(asset, msg.sender, amount);\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    )\\n        external virtual override returns (bytes4)\\n    {\\n        _handleTokenReceive(operator, from, tokenId, 1, data, true); \\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) \\n        external virtual override returns (bytes4)\\n    {   \\n       _handleTokenReceive(operator, from, id, value, data, false);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) \\n        external virtual override returns (bytes4)\\n    {\\n        revert(\\\"D24\\\");\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _isSupportsInterface(address addr, bytes4 interfaceId) internal view returns (bool) {\\n        if (addr.isContract()){\\n            try IERC165(addr).supportsInterface(interfaceId) returns (bool retval) {\\n                return retval;\\n            } catch {\\n                return false;\\n                }\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _participateOption(address participator,uint optionId) \\n        internal      \\n        optionExists(optionId) \\n        participated(optionId, false) \\n        offerPeriod(optionId, true)  \\n    {\\n        options[optionId].participant = participator;\\n        optionDetails[optionId].offerEnd = block.timestamp;\\n        emit Participate(participator, optionId);\\n    } \\n\\n    function _setOptionParams(\\n        address initiator,\\n        uint optionId,\\n        uint amountOfColleteral,\\n        uint amountOfCA, \\n        uint premiumAmount, \\n        uint optionExpiry, \\n        uint offerEnd\\n    ) \\n        internal \\n        optionExists(optionId) \\n        onlyInitiator(initiator, optionId) \\n    {\\n            require(optionDetails[optionId].optionExpiry == 0, \\\"D16\\\");\\n            options[optionId].amountOfColleteral = amountOfColleteral;\\n            options[optionId].amountOfCA = amountOfCA;\\n            options[optionId].premiumAmount = premiumAmount;\\n            optionDetails[optionId].optionExpiry = block.timestamp + optionExpiry;\\n            optionDetails[optionId].offerEnd = block.timestamp + offerEnd;\\n            emit Offer(initiator, optionId, true);\\n    }\\n\\n    function _transferColleteral(address to, uint optionId) internal {\\n        uint amount = options[optionId].amountOfColleteral;\\n        options[optionId].amountOfColleteral = 0;\\n        if (optionDetails[optionId].colleteralType == uint(AssetTypes.ERC20)) {\\n            IERC20(options[optionId].colleteral).transfer(to, amount);\\n        } else if (optionDetails[optionId].colleteralType == uint(AssetTypes.ERC721)) {\\n            IERC721(options[optionId].colleteral).safeTransferFrom(\\n                address(this),\\n                to,\\n                options[optionId].indexOfColleteral\\n            );\\n        } else if (optionDetails[optionId].colleteralType == uint(AssetTypes.ERC1155)) {\\n            IERC1155(options[optionId].colleteral).safeTransferFrom(\\n                address(this), \\n                to, \\n                options[optionId].indexOfColleteral, \\n                amount,\\n                bytes(\\\"\\\")\\n            );\\n        } else {\\n            revert(\\\"D5\\\");\\n        }\\n        emit WithdrawColleteral(to, optionId, amount);\\n    }\\n\\n    function _exerciseOption(address to,uint optionId) \\n        internal \\n        expired(optionId, false)\\n        onlyParticipant(to, optionId)\\n    {\\n        require(!optionDetails[optionId].exercised, \\\"D7\\\");\\n        optionDetails[optionId].exercised = true;\\n        _transferColleteral(to ,optionId);\\n        emit Exercise(to, optionId);\\n    }\\n\\n    function _buyOption(address to, uint optionId) \\n        internal \\n        optionExists(optionId) \\n        expired(optionId, false)\\n    {\\n        require(optionDetails[optionId].isListed, \\\"D14\\\");\\n        withdrawAllowance[optionDetails[optionId].listAsset][options[optionId].participant] += optionDetails[optionId].listAmount;\\n        emit Transfer(options[optionId].participant, to, optionId);\\n        options[optionId].participant = to;\\n        _delistOption(to ,optionId);\\n    }\\n\\n    function _delistOption(address participant, uint optionId) \\n        internal\\n        onlyParticipant(participant, optionId) \\n    {\\n        require(optionDetails[optionId].isListed, \\\"D7\\\");\\n        optionDetails[optionId].isListed = false;\\n        emit Listed(optionId, false);\\n    }    \\n\\n    /**\\n        modes:\\n        - 1 : SetOptionParams\\n        - 2 : Participate\\n        - 3 : Buy Option\\n        - 4 : Exercise Option\\n    */\\n    function _handleTokenReceive(   \\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data,\\n        bool check\\n    ) \\n        internal \\n    {   \\n        uint8 mode = abi.decode(data[:32], (uint8));   \\n        if (mode == 1) {\\n            (uint optionId,\\n            uint amountOfCA, \\n            uint premiumAmount, \\n            uint optionExpiry, \\n            uint offerEnd)  = abi.decode(data[32:], (uint , uint, uint, uint, uint));\\n            require(msg.sender == options[optionId].colleteral, \\\"D19\\\");\\n            require(id == options[optionId].indexOfColleteral, \\\"D22\\\");\\n            _setOptionParams(\\n                operator, \\n                optionId, \\n                value,\\n                amountOfCA, \\n                premiumAmount, \\n                optionExpiry, \\n                offerEnd\\n            );\\n        } else if (mode == 2) {\\n            uint optionId= abi.decode(data[32:], (uint));\\n            require(msg.sender == options[optionId].premiumAsset, \\\"D19\\\");\\n            require(check || options[optionId].premiumAmount <= value, \\\"D20\\\");\\n            require(id == options[optionId].indexOfPremium, \\\"D22\\\");\\n            _participateOption(operator, optionId);\\n        } else if (mode == 3) {\\n            uint optionId= abi.decode(data[32:], (uint));\\n            require(msg.sender == optionDetails[optionId].listAsset, \\\"D19\\\");\\n            require(check || optionDetails[optionId].listAmount <= value, \\\"D20\\\");\\n            require(id == optionDetails[optionId].indexOfListAsset, \\\"D22\\\");\\n            _buyOption(operator, optionId);\\n        } else if (mode == 4) {\\n            console.log(\\\"mode: 4\\\");\\n            uint optionId= abi.decode(data[32:], (uint));\\n            require(msg.sender == options[optionId].counterAsset, \\\"D19\\\");\\n            require(check || options[optionId].amountOfCA <= value, \\\"D20\\\");\\n            require(id == options[optionId].indexOfCounter, \\\"D22\\\");\\n            _exerciseOption(operator, optionId);\\n        } else {\\n            revert(\\\"D21\\\");\\n        }\\n    }   \\n    \\n    function _determineERCStandart(address addr) internal view returns (uint8){\\n        if (addr.isContract()) {\\n            if (_isSupportsInterface(addr, ERC1155_INTERFACE_ID)) {\\n                return uint8(AssetTypes.ERC1155);\\n            } else if (_isSupportsInterface(addr, ERC721_INTERFACE_ID)) {\\n                return uint8(AssetTypes.ERC721);\\n            } else {\\n                return uint8(AssetTypes.ERC20);\\n            }\\n        } else {\\n            revert(\\\"Address is not a contract\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x646a268cade63d8c6b51dfb34ea3e6a23a28d0c515f1f33b327c385d6cb40214\",\"license\":\"Unlicensed\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60c06040526380ac58cd60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166080907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525063d9b67a2660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660a0907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152503480156100a857600080fd5b5060805160a05161594f620000dd60003960008181610f6801526125b401526000818161132401526125fd015261594f6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806357620cdf116100ad578063bc197c8111610071578063bc197c8114610351578063f23a6e6114610381578063f52f2526146103b1578063f81cba05146103cd578063fba225b9146103e95761012c565b806357620cdf146102c357806359f4a907146102df57806360514205146102fd5780636f025b5c14610319578063b5c5f672146103355761012c565b8063233ac008116100f4578063233ac0081461020357806329a2755c146102335780632ca069a51461024f57806332800dcf1461026d578063409e2205146102895761012c565b806301ffc9a714610131578063065170f414610161578063117e05d91461019b578063150b7a02146101b75780631f01664a146101e7575b600080fd5b61014b6004803603810190610146919061416b565b610405565b60405161015891906141b3565b60405180910390f35b61017b60048036038101906101769190614204565b6104b7565b6040516101929b9a9998979695949392919061429d565b60405180910390f35b6101b560048036038101906101b09190614374565b61057f565b005b6101d160048036038101906101cc9190614440565b6108f0565b6040516101de91906144d7565b60405180910390f35b61020160048036038101906101fc9190614204565b610916565b005b61021d600480360381019061021891906144f2565b610f34565b60405161022a9190614532565b60405180910390f35b61024d60048036038101906102489190614204565b610f59565b005b610257610f66565b60405161026491906144d7565b60405180910390f35b6102876004803603810190610282919061454d565b610f8a565b005b6102a3600480360381019061029e9190614204565b6110d3565b6040516102ba9b9a999897969594939291906145da565b60405180910390f35b6102dd60048036038101906102d89190614204565b6111cd565b005b6102e7611322565b6040516102f491906144d7565b60405180910390f35b61031760048036038101906103129190614204565b611346565b005b610333600480360381019061032e9190614685565b61186c565b005b61034f600480360381019061034a9190614712565b611c0b565b005b61036b600480360381019061036691906147bb565b611fba565b60405161037891906144d7565b60405180910390f35b61039b60048036038101906103969190614897565b611ff7565b6040516103a891906144d7565b60405180910390f35b6103cb60048036038101906103c69190614204565b61201d565b005b6103e760048036038101906103e29190614204565b612172565b005b61040360048036038101906103fe9190614204565b612433565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b0575063bc197c8160e01b63f23a6e6160e01b63150b7a0260e01b18187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060050160029054906101000a900460ff16908060050160039054906101000a900460ff16908060050160049054906101000a900460ff16908060050160059054906101000a900460ff1690508b565b33846001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c9061498e565b60405180910390fd5b856000801561068b5742600260008481526020019081526020016000206003015410610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d906149fa565b60405180910390fd5b6106e5565b42600260008481526020019081526020016000206003015410156106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90614a66565b60405180910390fd5b5b86600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d90614ad2565b60405180910390fd5b600260008a815260200190815260200160002060050160059054906101000a900460ff16156107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190614b3e565b60405180910390fd5b6001600260008b815260200190815260200160002060050160046101000a81548160ff02191690831515021790555087600260008b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008b81526020019081526020016000206004018190555086600260008b81526020019081526020016000206001018190555061087d88612588565b600260008b815260200190815260200160002060050160026101000a81548160ff021916908360ff1602179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c8960016040516108dd929190614b5e565b60405180910390a1505050505050505050565b600061090386868660018787600161269c565b63150b7a0260e01b905095945050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390614bd3565b60405180910390fd5b82600180610a6e57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090614c3f565b60405180910390fd5b610b15565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90614cab565b60405180910390fd5b5b600060016000878152602001908152602001600020600a015411610b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6590614d17565b60405180910390fd5b600060016000878152602001908152602001600020600a01549050600060016000888152602001908152602001600020600a018190555060006002811115610bb957610bb8614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610ca0576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c57929190614d66565b6020604051808303816000875af1158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a9190614dbb565b50610ef1565b60016002811115610cb457610cb3614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610da1576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008b8152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610d6a93929190614de8565b600060405180830381600087803b158015610d8457600080fd5b505af1158015610d98573d6000803e3d6000fd5b50505050610ef0565b600280811115610db457610db3614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610eb4576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033600160008b81526020019081526020016000206007015485604051806020016040528060008152506040518663ffffffff1660e01b8152600401610e7d959493929190614eb8565b600060405180830381600087803b158015610e9757600080fd5b505af1158015610eab573d6000803e3d6000fd5b50505050610eef565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee690614f5e565b60405180910390fd5b5b5b7f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610f2493929190614f7e565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610f633382612d71565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006002811115610f9e57610f9d614d37565b5b6002600088815260200190815260200160002060050160009054906101000a900460ff1660ff1614611005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffc90615001565b60405180910390fd5b61101433878787878787612ee9565b6001600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161108793929190614de8565b6020604051808303816000875af11580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca9190614dbb565b50505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501549080600601549080600701549080600801549080600901549080600a015490508b565b600060028111156111e1576111e0614d37565b5b6002600083815260200190815260200160002060050160039054906101000a900460ff1660ff1614611248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123f9061506d565b60405180910390fd5b6112523382613188565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600a01546040518463ffffffff1660e01b81526004016112db93929190614de8565b6020604051808303816000875af11580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190614dbb565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390614bd3565b60405180910390fd5b6002600084815260200190815260200160002060050160059054906101000a900460ff1661144f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611446906150d9565b60405180910390fd5b60006001600085815260200190815260200160002060090154116114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f90614d17565b60405180910390fd5b60006001600085815260200190815260200160002060090154905060006001600086815260200190815260200160002060090181905550600060028111156114f3576114f2614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156115da576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611591929190614d66565b6020604051808303816000875af11580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190614dbb565b5061182b565b600160028111156115ee576115ed614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156116db576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360016000898152602001908152602001600020600601546040518463ffffffff1660e01b81526004016116a493929190614de8565b600060405180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b5050505061182a565b6002808111156116ee576116ed614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156117ee576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033600160008981526020019081526020016000206006015485604051806020016040528060008152506040518663ffffffff1660e01b81526004016117b7959493929190614eb8565b600060405180830381600087803b1580156117d157600080fd5b505af11580156117e5573d6000803e3d6000fd5b50505050611829565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182090614f5e565b60405180910390fd5b5b5b7fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161185e93929190614f7e565b60405180910390a150505050565b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d490614ad2565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561194e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194590614ad2565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b690614ad2565b60405180910390fd5b6119c9600061355e565b60006119d56000613574565b9050896001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060016000838152602001908152602001600020905060006002600084815260200190815260200160002090508a8260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888260050181905550878260060181905550868260070181905550338260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b478c612588565b8160050160006101000a81548160ff021916908360ff160217905550611b6c8b612588565b8160050160016101000a81548160ff021916908360ff160217905550611b918a612588565b8160050160036101000a81548160ff021916908360ff160217905550823373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e391596000604051611bf591906141b3565b60405180910390a3505050505050505050505050565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190615145565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d569190615194565b925050819055506000611d6884612588565b60ff16905060006002811115611d8157611d80614d37565b5b811415611e0c578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611dc3929190614d66565b6020604051808303816000875af1158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190614dbb565b50611f79565b60016002811115611e2057611e1f614d37565b5b811415611e9b578373ffffffffffffffffffffffffffffffffffffffff166342842e0e3033866040518463ffffffff1660e01b8152600401611e6493929190614de8565b600060405180830381600087803b158015611e7e57600080fd5b505af1158015611e92573d6000803e3d6000fd5b50505050611f78565b600280811115611eae57611ead614d37565b5b811415611f3c578373ffffffffffffffffffffffffffffffffffffffff1663f242432a30338686604051806020016040528060008152506040518663ffffffff1660e01b8152600401611f05959493929190614eb8565b600060405180830381600087803b158015611f1f57600080fd5b505af1158015611f33573d6000803e3d6000fd5b50505050611f77565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6e90614f5e565b60405180910390fd5b5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb843384604051611fac93929190614de8565b60405180910390a150505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fee90615214565b60405180910390fd5b6000612009878787878787600061269c565b63f23a6e6160e01b90509695505050505050565b6000600281111561203157612030614d37565b5b6002600083815260200190815260200160002060050160019054906101000a900460ff1660ff1614612098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208f90615001565b60405180910390fd5b6120a23382613582565b6001600082815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600901546040518463ffffffff1660e01b815260040161212b93929190614de8565b6020604051808303816000875af115801561214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216e9190614dbb565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f90614bd3565b60405180910390fd5b82600080600260008481526020019081526020016000206002015411612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226a90615280565b60405180910390fd5b80156122d75742600260008481526020019081526020016000206002015410156122d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c9906152ec565b60405180910390fd5b612330565b4260026000848152602001908152602001600020600201541061232f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232690615358565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806123e357504260026000878152602001908152602001600020600301541080156123e257506002600086815260200190815260200160002060050160059054906101000a900460ff16155b5b612422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612419906153c4565b60405180910390fd5b61242c33866137d1565b5050505050565b6000600281111561244757612446614d37565b5b6002600083815260200190815260200160002060050160029054906101000a900460ff1660ff16146124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590615001565b60405180910390fd5b6124b83382613b94565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600401546040518463ffffffff1660e01b815260040161254193929190614de8565b6020604051808303816000875af1158015612560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125849190614dbb565b5050565b60006125a98273ffffffffffffffffffffffffffffffffffffffff16613f6a565b1561265c576125d8827f0000000000000000000000000000000000000000000000000000000000000000613f8d565b156125f7576002808111156125f0576125ef614d37565b5b9050612697565b612621827f0000000000000000000000000000000000000000000000000000000000000000613f8d565b15612641576001600281111561263a57612639614d37565b5b9050612697565b6000600281111561265557612654614d37565b5b9050612697565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268e90615430565b60405180910390fd5b919050565b600083836000906020926126b29392919061545a565b8101906126bf91906154c1565b905060018160ff161415612814576000806000806000888860209080926126e89392919061545a565b8101906126f591906154ee565b945094509450945094506001600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146127a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279a906155b5565b60405180910390fd5b60016000868152602001908152602001600020600501548b146127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290615621565b60405180910390fd5b61280a8d868c87878787612ee9565b5050505050612d67565b60028160ff1614156129b1576000848460209080926128359392919061545a565b8101906128429190614204565b90506001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df906155b5565b60405180910390fd5b828061290a57508560016000838152602001908152602001600020600a015411155b612949576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129409061568d565b60405180910390fd5b600160008281526020019081526020016000206007015487146129a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299890615621565b60405180910390fd5b6129ab8982613188565b50612d66565b60038160ff161415612b4e576000848460209080926129d29392919061545a565b8101906129df9190614204565b90506002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7c906155b5565b60405180910390fd5b8280612aa7575085600260008381526020019081526020016000206004015411155b612ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612add9061568d565b60405180910390fd5b60026000828152602001908152602001600020600101548714612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3590615621565b60405180910390fd5b612b488982613b94565b50612d65565b60048160ff161415612d2957612b986040518060400160405280600781526020017f6d6f64653a203400000000000000000000000000000000000000000000000000815250614047565b600084846020908092612bad9392919061545a565b810190612bba9190614204565b90506001600082815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c57906155b5565b60405180910390fd5b8280612c82575085600160008381526020019081526020016000206009015411155b612cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb89061568d565b60405180910390fd5b60016000828152602001908152602001600020600601548714612d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1090615621565b60405180910390fd5b612d238982613582565b50612d64565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5b906156f9565b60405180910390fd5b5b5b5b5050505050505050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0e9061498e565b60405180910390fd5b6002600084815260200190815260200160002060050160049054906101000a900460ff16612e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7190614b3e565b60405180910390fd5b60006002600085815260200190815260200160002060050160046101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612edb929190614b5e565b60405180910390a150505050565b85600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8790615765565b60405180910390fd5b87876001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302d90614bd3565b60405180910390fd5b6000600260008b8152602001908152602001600020600301541461308f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613086906157d1565b60405180910390fd5b87600160008b81526020019081526020016000206008018190555086600160008b81526020019081526020016000206009018190555085600160008b8152602001908152602001600020600a018190555084426130ec91906157f1565b600260008b815260200190815260200160002060030181905550834261311291906157f1565b600260008b815260200190815260200160002060020181905550888a73ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161317491906141b3565b60405180910390a350505050505050505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561322f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322690615765565b60405180910390fd5b816000806132e157600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146132dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d390614c3f565b60405180910390fd5b613388565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337e90614cab565b60405180910390fd5b5b83600160006002600084815260200190815260200160002060020154116133e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133db90615280565b60405180910390fd5b8015613448574260026000848152602001908152602001600020600201541015613443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343a906152ec565b60405180910390fd5b6134a1565b426002600084815260200190815260200160002060020154106134a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349790615358565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060020181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b80600080156135e857426002600084815260200190815260200160002060030154106135e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135da906149fa565b60405180910390fd5b613642565b4260026000848152602001908152602001600020600301541015613641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363890614a66565b60405180910390fd5b5b83836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146136e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136df9061498e565b60405180910390fd5b6002600086815260200190815260200160002060050160059054906101000a900460ff161561374c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374390614b3e565b60405180910390fd5b60016002600087815260200190815260200160002060050160056101000a81548160ff02191690831515021790555061378586866137d1565b848673ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a3505050505050565b600060016000838152602001908152602001600020600801549050600060016000848152602001908152602001600020600801819055506000600281111561381c5761381b614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613903576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016138ba929190614d66565b6020604051808303816000875af11580156138d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fd9190614dbb565b50613b54565b6001600281111561391757613916614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613a04576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e308560016000878152602001908152602001600020600501546040518463ffffffff1660e01b81526004016139cd93929190614de8565b600060405180830381600087803b1580156139e757600080fd5b505af11580156139fb573d6000803e3d6000fd5b50505050613b53565b600280811115613a1757613a16614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613b17576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600160008781526020019081526020016000206005015485604051806020016040528060008152506040518663ffffffff1660e01b8152600401613ae0959493929190614eb8565b600060405180830381600087803b158015613afa57600080fd5b505af1158015613b0e573d6000803e3d6000fd5b50505050613b52565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4990614f5e565b60405180910390fd5b5b5b7f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc838383604051613b8793929190614f7e565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c3290615765565b60405180910390fd5b8160008015613ca15742600260008481526020019081526020016000206003015410613c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c93906149fa565b60405180910390fd5b613cfb565b4260026000848152602001908152602001600020600301541015613cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cf190614a66565b60405180910390fd5b5b6002600085815260200190815260200160002060050160049054906101000a900460ff16613d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d5590615893565b60405180910390fd5b6002600085815260200190815260200160002060040154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613e6c91906157f1565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613f638585612d71565b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000613fae8373ffffffffffffffffffffffffffffffffffffffff16613f6a565b1561403c578273ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b8152600401613fec91906144d7565b602060405180830381865afa92505050801561402657506040513d601f19601f820116820180604052508101906140239190614dbb565b60015b6140335760009050614041565b80915050614041565b600090505b92915050565b6140dd8160405160240161405b91906158f7565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506140e0565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61414881614113565b811461415357600080fd5b50565b6000813590506141658161413f565b92915050565b60006020828403121561418157614180614109565b5b600061418f84828501614156565b91505092915050565b60008115159050919050565b6141ad81614198565b82525050565b60006020820190506141c860008301846141a4565b92915050565b6000819050919050565b6141e1816141ce565b81146141ec57600080fd5b50565b6000813590506141fe816141d8565b92915050565b60006020828403121561421a57614219614109565b5b6000614228848285016141ef565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061425c82614231565b9050919050565b61426c81614251565b82525050565b61427b816141ce565b82525050565b600060ff82169050919050565b61429781614281565b82525050565b6000610160820190506142b3600083018e614263565b6142c0602083018d614272565b6142cd604083018c614272565b6142da606083018b614272565b6142e7608083018a614272565b6142f460a083018961428e565b61430160c083018861428e565b61430e60e083018761428e565b61431c61010083018661428e565b61432a6101208301856141a4565b6143386101408301846141a4565b9c9b505050505050505050505050565b61435181614251565b811461435c57600080fd5b50565b60008135905061436e81614348565b92915050565b6000806000806080858703121561438e5761438d614109565b5b600061439c878288016141ef565b94505060206143ad8782880161435f565b93505060406143be878288016141ef565b92505060606143cf878288016141ef565b91505092959194509250565b600080fd5b600080fd5b600080fd5b60008083601f840112614400576143ff6143db565b5b8235905067ffffffffffffffff81111561441d5761441c6143e0565b5b602083019150836001820283011115614439576144386143e5565b5b9250929050565b60008060008060006080868803121561445c5761445b614109565b5b600061446a8882890161435f565b955050602061447b8882890161435f565b945050604061448c888289016141ef565b935050606086013567ffffffffffffffff8111156144ad576144ac61410e565b5b6144b9888289016143ea565b92509250509295509295909350565b6144d181614113565b82525050565b60006020820190506144ec60008301846144c8565b92915050565b6000806040838503121561450957614508614109565b5b60006145178582860161435f565b92505060206145288582860161435f565b9150509250929050565b60006020820190506145476000830184614272565b92915050565b60008060008060008060c0878903121561456a57614569614109565b5b600061457889828a016141ef565b965050602061458989828a016141ef565b955050604061459a89828a016141ef565b94505060606145ab89828a016141ef565b93505060806145bc89828a016141ef565b92505060a06145cd89828a016141ef565b9150509295509295509295565b6000610160820190506145f0600083018e614263565b6145fd602083018d614263565b61460a604083018c614263565b614617606083018b614263565b614624608083018a614263565b61463160a0830189614272565b61463e60c0830188614272565b61464b60e0830187614272565b614659610100830186614272565b614667610120830185614272565b614675610140830184614272565b9c9b505050505050505050505050565b60008060008060008060c087890312156146a2576146a1614109565b5b60006146b089828a0161435f565b96505060206146c189828a0161435f565b95505060406146d289828a0161435f565b94505060606146e389828a016141ef565b93505060806146f489828a016141ef565b92505060a061470589828a016141ef565b9150509295509295509295565b60008060006060848603121561472b5761472a614109565b5b60006147398682870161435f565b935050602061474a868287016141ef565b925050604061475b868287016141ef565b9150509250925092565b60008083601f84011261477b5761477a6143db565b5b8235905067ffffffffffffffff811115614798576147976143e0565b5b6020830191508360208202830111156147b4576147b36143e5565b5b9250929050565b60008060008060008060008060a0898b0312156147db576147da614109565b5b60006147e98b828c0161435f565b98505060206147fa8b828c0161435f565b975050604089013567ffffffffffffffff81111561481b5761481a61410e565b5b6148278b828c01614765565b9650965050606089013567ffffffffffffffff81111561484a5761484961410e565b5b6148568b828c01614765565b9450945050608089013567ffffffffffffffff8111156148795761487861410e565b5b6148858b828c016143ea565b92509250509295985092959890939650565b60008060008060008060a087890312156148b4576148b3614109565b5b60006148c289828a0161435f565b96505060206148d389828a0161435f565b95505060406148e489828a016141ef565b94505060606148f589828a016141ef565b935050608087013567ffffffffffffffff8111156149165761491561410e565b5b61492289828a016143ea565b92509250509295509295509295565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b6000614978600283614931565b915061498382614942565b602082019050919050565b600060208201905081810360008301526149a78161496b565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b60006149e4600283614931565b91506149ef826149ae565b602082019050919050565b60006020820190508181036000830152614a13816149d7565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b6000614a50600283614931565b9150614a5b82614a1a565b602082019050919050565b60006020820190508181036000830152614a7f81614a43565b9050919050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b6000614abc601a83614931565b9150614ac782614a86565b602082019050919050565b60006020820190508181036000830152614aeb81614aaf565b9050919050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b28600283614931565b9150614b3382614af2565b602082019050919050565b60006020820190508181036000830152614b5781614b1b565b9050919050565b6000604082019050614b736000830185614272565b614b8060208301846141a4565b9392505050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b6000614bbd600283614931565b9150614bc882614b87565b602082019050919050565b60006020820190508181036000830152614bec81614bb0565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b6000614c29600383614931565b9150614c3482614bf3565b602082019050919050565b60006020820190508181036000830152614c5881614c1c565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b6000614c95600383614931565b9150614ca082614c5f565b602082019050919050565b60006020820190508181036000830152614cc481614c88565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b6000614d01600383614931565b9150614d0c82614ccb565b602082019050919050565b60006020820190508181036000830152614d3081614cf4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082019050614d7b6000830185614263565b614d886020830184614272565b9392505050565b614d9881614198565b8114614da357600080fd5b50565b600081519050614db581614d8f565b92915050565b600060208284031215614dd157614dd0614109565b5b6000614ddf84828501614da6565b91505092915050565b6000606082019050614dfd6000830186614263565b614e0a6020830185614263565b614e176040830184614272565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614e59578082015181840152602081019050614e3e565b83811115614e68576000848401525b50505050565b6000601f19601f8301169050919050565b6000614e8a82614e1f565b614e948185614e2a565b9350614ea4818560208601614e3b565b614ead81614e6e565b840191505092915050565b600060a082019050614ecd6000830188614263565b614eda6020830187614263565b614ee76040830186614272565b614ef46060830185614272565b8181036080830152614f068184614e7f565b90509695505050505050565b7f4435000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f48600283614931565b9150614f5382614f12565b602082019050919050565b60006020820190508181036000830152614f7781614f3b565b9050919050565b6000606082019050614f936000830186614263565b614fa06020830185614272565b614fad6040830184614272565b949350505050565b7f4436000000000000000000000000000000000000000000000000000000000000600082015250565b6000614feb600283614931565b9150614ff682614fb5565b602082019050919050565b6000602082019050818103600083015261501a81614fde565b9050919050565b7f4431000000000000000000000000000000000000000000000000000000000000600082015250565b6000615057600283614931565b915061506282615021565b602082019050919050565b600060208201905081810360008301526150868161504a565b9050919050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b60006150c3600383614931565b91506150ce8261508d565b602082019050919050565b600060208201905081810360008301526150f2816150b6565b9050919050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b600061512f600383614931565b915061513a826150f9565b602082019050919050565b6000602082019050818103600083015261515e81615122565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061519f826141ce565b91506151aa836141ce565b9250828210156151bd576151bc615165565b5b828203905092915050565b7f4432340000000000000000000000000000000000000000000000000000000000600082015250565b60006151fe600383614931565b9150615209826151c8565b602082019050919050565b6000602082019050818103600083015261522d816151f1565b9050919050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b600061526a602083614931565b915061527582615234565b602082019050919050565b600060208201905081810360008301526152998161525d565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b60006152d6600d83614931565b91506152e1826152a0565b602082019050919050565b60006020820190508181036000830152615305816152c9565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b6000615342601683614931565b915061534d8261530c565b602082019050919050565b6000602082019050818103600083015261537181615335565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b60006153ae600283614931565b91506153b982615378565b602082019050919050565b600060208201905081810360008301526153dd816153a1565b9050919050565b7f41646472657373206973206e6f74206120636f6e747261637400000000000000600082015250565b600061541a601983614931565b9150615425826153e4565b602082019050919050565b600060208201905081810360008301526154498161540d565b9050919050565b600080fd5b600080fd5b6000808585111561546e5761546d615450565b5b8386111561547f5761547e615455565b5b6001850283019150848603905094509492505050565b61549e81614281565b81146154a957600080fd5b50565b6000813590506154bb81615495565b92915050565b6000602082840312156154d7576154d6614109565b5b60006154e5848285016154ac565b91505092915050565b600080600080600060a0868803121561550a57615509614109565b5b6000615518888289016141ef565b9550506020615529888289016141ef565b945050604061553a888289016141ef565b935050606061554b888289016141ef565b925050608061555c888289016141ef565b9150509295509295909350565b7f4431390000000000000000000000000000000000000000000000000000000000600082015250565b600061559f600383614931565b91506155aa82615569565b602082019050919050565b600060208201905081810360008301526155ce81615592565b9050919050565b7f4432320000000000000000000000000000000000000000000000000000000000600082015250565b600061560b600383614931565b9150615616826155d5565b602082019050919050565b6000602082019050818103600083015261563a816155fe565b9050919050565b7f4432300000000000000000000000000000000000000000000000000000000000600082015250565b6000615677600383614931565b915061568282615641565b602082019050919050565b600060208201905081810360008301526156a68161566a565b9050919050565b7f4432310000000000000000000000000000000000000000000000000000000000600082015250565b60006156e3600383614931565b91506156ee826156ad565b602082019050919050565b60006020820190508181036000830152615712816156d6565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b600061574f601783614931565b915061575a82615719565b602082019050919050565b6000602082019050818103600083015261577e81615742565b9050919050565b7f4431360000000000000000000000000000000000000000000000000000000000600082015250565b60006157bb600383614931565b91506157c682615785565b602082019050919050565b600060208201905081810360008301526157ea816157ae565b9050919050565b60006157fc826141ce565b9150615807836141ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561583c5761583b615165565b5b828201905092915050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b600061587d600383614931565b915061588882615847565b602082019050919050565b600060208201905081810360008301526158ac81615870565b9050919050565b600081519050919050565b60006158c9826158b3565b6158d38185614931565b93506158e3818560208601614e3b565b6158ec81614e6e565b840191505092915050565b6000602082019050818103600083015261591181846158be565b90509291505056fea264697066735822122060d572fe1920f91d272e030711aff2a90b56cf7f0d1675c59a4b6be61e6c668664736f6c634300080a0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806357620cdf116100ad578063bc197c8111610071578063bc197c8114610351578063f23a6e6114610381578063f52f2526146103b1578063f81cba05146103cd578063fba225b9146103e95761012c565b806357620cdf146102c357806359f4a907146102df57806360514205146102fd5780636f025b5c14610319578063b5c5f672146103355761012c565b8063233ac008116100f4578063233ac0081461020357806329a2755c146102335780632ca069a51461024f57806332800dcf1461026d578063409e2205146102895761012c565b806301ffc9a714610131578063065170f414610161578063117e05d91461019b578063150b7a02146101b75780631f01664a146101e7575b600080fd5b61014b6004803603810190610146919061416b565b610405565b60405161015891906141b3565b60405180910390f35b61017b60048036038101906101769190614204565b6104b7565b6040516101929b9a9998979695949392919061429d565b60405180910390f35b6101b560048036038101906101b09190614374565b61057f565b005b6101d160048036038101906101cc9190614440565b6108f0565b6040516101de91906144d7565b60405180910390f35b61020160048036038101906101fc9190614204565b610916565b005b61021d600480360381019061021891906144f2565b610f34565b60405161022a9190614532565b60405180910390f35b61024d60048036038101906102489190614204565b610f59565b005b610257610f66565b60405161026491906144d7565b60405180910390f35b6102876004803603810190610282919061454d565b610f8a565b005b6102a3600480360381019061029e9190614204565b6110d3565b6040516102ba9b9a999897969594939291906145da565b60405180910390f35b6102dd60048036038101906102d89190614204565b6111cd565b005b6102e7611322565b6040516102f491906144d7565b60405180910390f35b61031760048036038101906103129190614204565b611346565b005b610333600480360381019061032e9190614685565b61186c565b005b61034f600480360381019061034a9190614712565b611c0b565b005b61036b600480360381019061036691906147bb565b611fba565b60405161037891906144d7565b60405180910390f35b61039b60048036038101906103969190614897565b611ff7565b6040516103a891906144d7565b60405180910390f35b6103cb60048036038101906103c69190614204565b61201d565b005b6103e760048036038101906103e29190614204565b612172565b005b61040360048036038101906103fe9190614204565b612433565b005b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b0575063bc197c8160e01b63f23a6e6160e01b63150b7a0260e01b18187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060050160029054906101000a900460ff16908060050160039054906101000a900460ff16908060050160049054906101000a900460ff16908060050160059054906101000a900460ff1690508b565b33846001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c9061498e565b60405180910390fd5b856000801561068b5742600260008481526020019081526020016000206003015410610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d906149fa565b60405180910390fd5b6106e5565b42600260008481526020019081526020016000206003015410156106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90614a66565b60405180910390fd5b5b86600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d90614ad2565b60405180910390fd5b600260008a815260200190815260200160002060050160059054906101000a900460ff16156107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190614b3e565b60405180910390fd5b6001600260008b815260200190815260200160002060050160046101000a81548160ff02191690831515021790555087600260008b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600260008b81526020019081526020016000206004018190555086600260008b81526020019081526020016000206001018190555061087d88612588565b600260008b815260200190815260200160002060050160026101000a81548160ff021916908360ff1602179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c8960016040516108dd929190614b5e565b60405180910390a1505050505050505050565b600061090386868660018787600161269c565b63150b7a0260e01b905095945050505050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390614bd3565b60405180910390fd5b82600180610a6e57600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090614c3f565b60405180910390fd5b610b15565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90614cab565b60405180910390fd5b5b600060016000878152602001908152602001600020600a015411610b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6590614d17565b60405180910390fd5b600060016000878152602001908152602001600020600a01549050600060016000888152602001908152602001600020600a018190555060006002811115610bb957610bb8614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610ca0576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c57929190614d66565b6020604051808303816000875af1158015610c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9a9190614dbb565b50610ef1565b60016002811115610cb457610cb3614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610da1576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008b8152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610d6a93929190614de8565b600060405180830381600087803b158015610d8457600080fd5b505af1158015610d98573d6000803e3d6000fd5b50505050610ef0565b600280811115610db457610db3614d37565b5b6002600088815260200190815260200160002060050160039054906101000a900460ff1660ff161415610eb4576001600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033600160008b81526020019081526020016000206007015485604051806020016040528060008152506040518663ffffffff1660e01b8152600401610e7d959493929190614eb8565b600060405180830381600087803b158015610e9757600080fd5b505af1158015610eab573d6000803e3d6000fd5b50505050610eef565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee690614f5e565b60405180910390fd5b5b5b7f364c50cfd85ef2e44ae41c769b375ca3e4cd21a63f2f593171bdda820f70d1f7338783604051610f2493929190614f7e565b60405180910390a1505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610f633382612d71565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006002811115610f9e57610f9d614d37565b5b6002600088815260200190815260200160002060050160009054906101000a900460ff1660ff1614611005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffc90615001565b60405180910390fd5b61101433878787878787612ee9565b6001600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161108793929190614de8565b6020604051808303816000875af11580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca9190614dbb565b50505050505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501549080600601549080600701549080600801549080600901549080600a015490508b565b600060028111156111e1576111e0614d37565b5b6002600083815260200190815260200160002060050160039054906101000a900460ff1660ff1614611248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123f9061506d565b60405180910390fd5b6112523382613188565b6001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600a01546040518463ffffffff1660e01b81526004016112db93929190614de8565b6020604051808303816000875af11580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190614dbb565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390614bd3565b60405180910390fd5b6002600084815260200190815260200160002060050160059054906101000a900460ff1661144f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611446906150d9565b60405180910390fd5b60006001600085815260200190815260200160002060090154116114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f90614d17565b60405180910390fd5b60006001600085815260200190815260200160002060090154905060006001600086815260200190815260200160002060090181905550600060028111156114f3576114f2614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156115da576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611591929190614d66565b6020604051808303816000875af11580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d49190614dbb565b5061182b565b600160028111156115ee576115ed614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156116db576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360016000898152602001908152602001600020600601546040518463ffffffff1660e01b81526004016116a493929190614de8565b600060405180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b5050505061182a565b6002808111156116ee576116ed614d37565b5b6002600086815260200190815260200160002060050160019054906101000a900460ff1660ff1614156117ee576001600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033600160008981526020019081526020016000206006015485604051806020016040528060008152506040518663ffffffff1660e01b81526004016117b7959493929190614eb8565b600060405180830381600087803b1580156117d157600080fd5b505af11580156117e5573d6000803e3d6000fd5b50505050611829565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182090614f5e565b60405180910390fd5b5b5b7fd4072f896a83f1975997e4b3c8cc6e44538eafada8b6537b11e77ff1ead2455f33858360405161185e93929190614f7e565b60405180910390a150505050565b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d490614ad2565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561194e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194590614ad2565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b690614ad2565b60405180910390fd5b6119c9600061355e565b60006119d56000613574565b9050896001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060016000838152602001908152602001600020905060006002600084815260200190815260200160002090508a8260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888260050181905550878260060181905550868260070181905550338260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b478c612588565b8160050160006101000a81548160ff021916908360ff160217905550611b6c8b612588565b8160050160016101000a81548160ff021916908360ff160217905550611b918a612588565b8160050160036101000a81548160ff021916908360ff160217905550823373ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e391596000604051611bf591906141b3565b60405180910390a3505050505050505050505050565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190615145565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d569190615194565b925050819055506000611d6884612588565b60ff16905060006002811115611d8157611d80614d37565b5b811415611e0c578373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611dc3929190614d66565b6020604051808303816000875af1158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190614dbb565b50611f79565b60016002811115611e2057611e1f614d37565b5b811415611e9b578373ffffffffffffffffffffffffffffffffffffffff166342842e0e3033866040518463ffffffff1660e01b8152600401611e6493929190614de8565b600060405180830381600087803b158015611e7e57600080fd5b505af1158015611e92573d6000803e3d6000fd5b50505050611f78565b600280811115611eae57611ead614d37565b5b811415611f3c578373ffffffffffffffffffffffffffffffffffffffff1663f242432a30338686604051806020016040528060008152506040518663ffffffff1660e01b8152600401611f05959493929190614eb8565b600060405180830381600087803b158015611f1f57600080fd5b505af1158015611f33573d6000803e3d6000fd5b50505050611f77565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6e90614f5e565b60405180910390fd5b5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb843384604051611fac93929190614de8565b60405180910390a150505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fee90615214565b60405180910390fd5b6000612009878787878787600061269c565b63f23a6e6160e01b90509695505050505050565b6000600281111561203157612030614d37565b5b6002600083815260200190815260200160002060050160019054906101000a900460ff1660ff1614612098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208f90615001565b60405180910390fd5b6120a23382613582565b6001600082815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060016000868152602001908152602001600020600901546040518463ffffffff1660e01b815260040161212b93929190614de8565b6020604051808303816000875af115801561214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216e9190614dbb565b5050565b33816001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f90614bd3565b60405180910390fd5b82600080600260008481526020019081526020016000206002015411612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226a90615280565b60405180910390fd5b80156122d75742600260008481526020019081526020016000206002015410156122d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c9906152ec565b60405180910390fd5b612330565b4260026000848152602001908152602001600020600201541061232f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232690615358565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806123e357504260026000878152602001908152602001600020600301541080156123e257506002600086815260200190815260200160002060050160059054906101000a900460ff16155b5b612422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612419906153c4565b60405180910390fd5b61242c33866137d1565b5050505050565b6000600281111561244757612446614d37565b5b6002600083815260200190815260200160002060050160029054906101000a900460ff1660ff16146124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590615001565b60405180910390fd5b6124b83382613b94565b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333060026000868152602001908152602001600020600401546040518463ffffffff1660e01b815260040161254193929190614de8565b6020604051808303816000875af1158015612560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125849190614dbb565b5050565b60006125a98273ffffffffffffffffffffffffffffffffffffffff16613f6a565b1561265c576125d8827f0000000000000000000000000000000000000000000000000000000000000000613f8d565b156125f7576002808111156125f0576125ef614d37565b5b9050612697565b612621827f0000000000000000000000000000000000000000000000000000000000000000613f8d565b15612641576001600281111561263a57612639614d37565b5b9050612697565b6000600281111561265557612654614d37565b5b9050612697565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268e90615430565b60405180910390fd5b919050565b600083836000906020926126b29392919061545a565b8101906126bf91906154c1565b905060018160ff161415612814576000806000806000888860209080926126e89392919061545a565b8101906126f591906154ee565b945094509450945094506001600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146127a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279a906155b5565b60405180910390fd5b60016000868152602001908152602001600020600501548b146127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290615621565b60405180910390fd5b61280a8d868c87878787612ee9565b5050505050612d67565b60028160ff1614156129b1576000848460209080926128359392919061545a565b8101906128429190614204565b90506001600082815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df906155b5565b60405180910390fd5b828061290a57508560016000838152602001908152602001600020600a015411155b612949576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129409061568d565b60405180910390fd5b600160008281526020019081526020016000206007015487146129a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299890615621565b60405180910390fd5b6129ab8982613188565b50612d66565b60038160ff161415612b4e576000848460209080926129d29392919061545a565b8101906129df9190614204565b90506002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7c906155b5565b60405180910390fd5b8280612aa7575085600260008381526020019081526020016000206004015411155b612ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612add9061568d565b60405180910390fd5b60026000828152602001908152602001600020600101548714612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3590615621565b60405180910390fd5b612b488982613b94565b50612d65565b60048160ff161415612d2957612b986040518060400160405280600781526020017f6d6f64653a203400000000000000000000000000000000000000000000000000815250614047565b600084846020908092612bad9392919061545a565b810190612bba9190614204565b90506001600082815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c57906155b5565b60405180910390fd5b8280612c82575085600160008381526020019081526020016000206009015411155b612cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb89061568d565b60405180910390fd5b60016000828152602001908152602001600020600601548714612d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1090615621565b60405180910390fd5b612d238982613582565b50612d64565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5b906156f9565b60405180910390fd5b5b5b5b5050505050505050565b81816001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0e9061498e565b60405180910390fd5b6002600084815260200190815260200160002060050160049054906101000a900460ff16612e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7190614b3e565b60405180910390fd5b60006002600085815260200190815260200160002060050160046101000a81548160ff0219169083151502179055507f7f8b8b68ebd95ed5f82f3fae981c59ed57bcc3f9e43ae3c49a98963ac0f5bf1c836000604051612edb929190614b5e565b60405180910390a150505050565b85600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8790615765565b60405180910390fd5b87876001600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302d90614bd3565b60405180910390fd5b6000600260008b8152602001908152602001600020600301541461308f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613086906157d1565b60405180910390fd5b87600160008b81526020019081526020016000206008018190555086600160008b81526020019081526020016000206009018190555085600160008b8152602001908152602001600020600a018190555084426130ec91906157f1565b600260008b815260200190815260200160002060030181905550834261311291906157f1565b600260008b815260200190815260200160002060020181905550888a73ffffffffffffffffffffffffffffffffffffffff167f37dc54e85dbf55ec2e90e3cdd1758d2306604af7b56743fa10d9115fd1e39159600160405161317491906141b3565b60405180910390a350505050505050505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561322f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322690615765565b60405180910390fd5b816000806132e157600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146132dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d390614c3f565b60405180910390fd5b613388565b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337e90614cab565b60405180910390fd5b5b83600160006002600084815260200190815260200160002060020154116133e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133db90615280565b60405180910390fd5b8015613448574260026000848152602001908152602001600020600201541015613443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343a906152ec565b60405180910390fd5b6134a1565b426002600084815260200190815260200160002060020154106134a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349790615358565b60405180910390fd5b5b866001600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002600088815260200190815260200160002060020181905550858773ffffffffffffffffffffffffffffffffffffffff167feb353a6084f42c4569f7fe0e62ec9a9a107f0453a8f76735dd47ef68dcfcce3f60405160405180910390a350505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b80600080156135e857426002600084815260200190815260200160002060030154106135e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135da906149fa565b60405180910390fd5b613642565b4260026000848152602001908152602001600020600301541015613641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161363890614a66565b60405180910390fd5b5b83836001600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146136e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136df9061498e565b60405180910390fd5b6002600086815260200190815260200160002060050160059054906101000a900460ff161561374c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374390614b3e565b60405180910390fd5b60016002600087815260200190815260200160002060050160056101000a81548160ff02191690831515021790555061378586866137d1565b848673ffffffffffffffffffffffffffffffffffffffff167f5a20425ee28c08dfaf53c051ce9fb1fdfedad2949379924d3313a74c2c61a2a560405160405180910390a3505050505050565b600060016000838152602001908152602001600020600801549050600060016000848152602001908152602001600020600801819055506000600281111561381c5761381b614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613903576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016138ba929190614d66565b6020604051808303816000875af11580156138d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fd9190614dbb565b50613b54565b6001600281111561391757613916614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613a04576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e308560016000878152602001908152602001600020600501546040518463ffffffff1660e01b81526004016139cd93929190614de8565b600060405180830381600087803b1580156139e757600080fd5b505af11580156139fb573d6000803e3d6000fd5b50505050613b53565b600280811115613a1757613a16614d37565b5b6002600084815260200190815260200160002060050160009054906101000a900460ff1660ff161415613b17576001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600160008781526020019081526020016000206005015485604051806020016040528060008152506040518663ffffffff1660e01b8152600401613ae0959493929190614eb8565b600060405180830381600087803b158015613afa57600080fd5b505af1158015613b0e573d6000803e3d6000fd5b50505050613b52565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4990614f5e565b60405180910390fd5b5b5b7f6349409af923ab04f6ba4cd71740fcf0de9efb3a66822fd753b51741914227cc838383604051613b8793929190614f7e565b60405180910390a1505050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c3290615765565b60405180910390fd5b8160008015613ca15742600260008481526020019081526020016000206003015410613c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c93906149fa565b60405180910390fd5b613cfb565b4260026000848152602001908152602001600020600301541015613cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cf190614a66565b60405180910390fd5b5b6002600085815260200190815260200160002060050160049054906101000a900460ff16613d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d5590615893565b60405180910390fd5b6002600085815260200190815260200160002060040154600360006002600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613e6c91906157f1565b92505081905550838573ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4846001600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613f638585612d71565b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000613fae8373ffffffffffffffffffffffffffffffffffffffff16613f6a565b1561403c578273ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b8152600401613fec91906144d7565b602060405180830381865afa92505050801561402657506040513d601f19601f820116820180604052508101906140239190614dbb565b60015b6140335760009050614041565b80915050614041565b600090505b92915050565b6140dd8160405160240161405b91906158f7565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506140e0565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61414881614113565b811461415357600080fd5b50565b6000813590506141658161413f565b92915050565b60006020828403121561418157614180614109565b5b600061418f84828501614156565b91505092915050565b60008115159050919050565b6141ad81614198565b82525050565b60006020820190506141c860008301846141a4565b92915050565b6000819050919050565b6141e1816141ce565b81146141ec57600080fd5b50565b6000813590506141fe816141d8565b92915050565b60006020828403121561421a57614219614109565b5b6000614228848285016141ef565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061425c82614231565b9050919050565b61426c81614251565b82525050565b61427b816141ce565b82525050565b600060ff82169050919050565b61429781614281565b82525050565b6000610160820190506142b3600083018e614263565b6142c0602083018d614272565b6142cd604083018c614272565b6142da606083018b614272565b6142e7608083018a614272565b6142f460a083018961428e565b61430160c083018861428e565b61430e60e083018761428e565b61431c61010083018661428e565b61432a6101208301856141a4565b6143386101408301846141a4565b9c9b505050505050505050505050565b61435181614251565b811461435c57600080fd5b50565b60008135905061436e81614348565b92915050565b6000806000806080858703121561438e5761438d614109565b5b600061439c878288016141ef565b94505060206143ad8782880161435f565b93505060406143be878288016141ef565b92505060606143cf878288016141ef565b91505092959194509250565b600080fd5b600080fd5b600080fd5b60008083601f840112614400576143ff6143db565b5b8235905067ffffffffffffffff81111561441d5761441c6143e0565b5b602083019150836001820283011115614439576144386143e5565b5b9250929050565b60008060008060006080868803121561445c5761445b614109565b5b600061446a8882890161435f565b955050602061447b8882890161435f565b945050604061448c888289016141ef565b935050606086013567ffffffffffffffff8111156144ad576144ac61410e565b5b6144b9888289016143ea565b92509250509295509295909350565b6144d181614113565b82525050565b60006020820190506144ec60008301846144c8565b92915050565b6000806040838503121561450957614508614109565b5b60006145178582860161435f565b92505060206145288582860161435f565b9150509250929050565b60006020820190506145476000830184614272565b92915050565b60008060008060008060c0878903121561456a57614569614109565b5b600061457889828a016141ef565b965050602061458989828a016141ef565b955050604061459a89828a016141ef565b94505060606145ab89828a016141ef565b93505060806145bc89828a016141ef565b92505060a06145cd89828a016141ef565b9150509295509295509295565b6000610160820190506145f0600083018e614263565b6145fd602083018d614263565b61460a604083018c614263565b614617606083018b614263565b614624608083018a614263565b61463160a0830189614272565b61463e60c0830188614272565b61464b60e0830187614272565b614659610100830186614272565b614667610120830185614272565b614675610140830184614272565b9c9b505050505050505050505050565b60008060008060008060c087890312156146a2576146a1614109565b5b60006146b089828a0161435f565b96505060206146c189828a0161435f565b95505060406146d289828a0161435f565b94505060606146e389828a016141ef565b93505060806146f489828a016141ef565b92505060a061470589828a016141ef565b9150509295509295509295565b60008060006060848603121561472b5761472a614109565b5b60006147398682870161435f565b935050602061474a868287016141ef565b925050604061475b868287016141ef565b9150509250925092565b60008083601f84011261477b5761477a6143db565b5b8235905067ffffffffffffffff811115614798576147976143e0565b5b6020830191508360208202830111156147b4576147b36143e5565b5b9250929050565b60008060008060008060008060a0898b0312156147db576147da614109565b5b60006147e98b828c0161435f565b98505060206147fa8b828c0161435f565b975050604089013567ffffffffffffffff81111561481b5761481a61410e565b5b6148278b828c01614765565b9650965050606089013567ffffffffffffffff81111561484a5761484961410e565b5b6148568b828c01614765565b9450945050608089013567ffffffffffffffff8111156148795761487861410e565b5b6148858b828c016143ea565b92509250509295985092959890939650565b60008060008060008060a087890312156148b4576148b3614109565b5b60006148c289828a0161435f565b96505060206148d389828a0161435f565b95505060406148e489828a016141ef565b94505060606148f589828a016141ef565b935050608087013567ffffffffffffffff8111156149165761491561410e565b5b61492289828a016143ea565b92509250509295509295509295565b600082825260208201905092915050565b7f4433000000000000000000000000000000000000000000000000000000000000600082015250565b6000614978600283614931565b915061498382614942565b602082019050919050565b600060208201905081810360008301526149a78161496b565b9050919050565b7f4438000000000000000000000000000000000000000000000000000000000000600082015250565b60006149e4600283614931565b91506149ef826149ae565b602082019050919050565b60006020820190508181036000830152614a13816149d7565b9050919050565b7f4439000000000000000000000000000000000000000000000000000000000000600082015250565b6000614a50600283614931565b9150614a5b82614a1a565b602082019050919050565b60006020820190508181036000830152614a7f81614a43565b9050919050565b7f5472616e73616374696f6e20746f206164647265737328302921000000000000600082015250565b6000614abc601a83614931565b9150614ac782614a86565b602082019050919050565b60006020820190508181036000830152614aeb81614aaf565b9050919050565b7f4437000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b28600283614931565b9150614b3382614af2565b602082019050919050565b60006020820190508181036000830152614b5781614b1b565b9050919050565b6000604082019050614b736000830185614272565b614b8060208301846141a4565b9392505050565b7f4432000000000000000000000000000000000000000000000000000000000000600082015250565b6000614bbd600283614931565b9150614bc882614b87565b602082019050919050565b60006020820190508181036000830152614bec81614bb0565b9050919050565b7f4431330000000000000000000000000000000000000000000000000000000000600082015250565b6000614c29600383614931565b9150614c3482614bf3565b602082019050919050565b60006020820190508181036000830152614c5881614c1c565b9050919050565b7f4431320000000000000000000000000000000000000000000000000000000000600082015250565b6000614c95600383614931565b9150614ca082614c5f565b602082019050919050565b60006020820190508181036000830152614cc481614c88565b9050919050565b7f4431310000000000000000000000000000000000000000000000000000000000600082015250565b6000614d01600383614931565b9150614d0c82614ccb565b602082019050919050565b60006020820190508181036000830152614d3081614cf4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604082019050614d7b6000830185614263565b614d886020830184614272565b9392505050565b614d9881614198565b8114614da357600080fd5b50565b600081519050614db581614d8f565b92915050565b600060208284031215614dd157614dd0614109565b5b6000614ddf84828501614da6565b91505092915050565b6000606082019050614dfd6000830186614263565b614e0a6020830185614263565b614e176040830184614272565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614e59578082015181840152602081019050614e3e565b83811115614e68576000848401525b50505050565b6000601f19601f8301169050919050565b6000614e8a82614e1f565b614e948185614e2a565b9350614ea4818560208601614e3b565b614ead81614e6e565b840191505092915050565b600060a082019050614ecd6000830188614263565b614eda6020830187614263565b614ee76040830186614272565b614ef46060830185614272565b8181036080830152614f068184614e7f565b90509695505050505050565b7f4435000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f48600283614931565b9150614f5382614f12565b602082019050919050565b60006020820190508181036000830152614f7781614f3b565b9050919050565b6000606082019050614f936000830186614263565b614fa06020830185614272565b614fad6040830184614272565b949350505050565b7f4436000000000000000000000000000000000000000000000000000000000000600082015250565b6000614feb600283614931565b9150614ff682614fb5565b602082019050919050565b6000602082019050818103600083015261501a81614fde565b9050919050565b7f4431000000000000000000000000000000000000000000000000000000000000600082015250565b6000615057600283614931565b915061506282615021565b602082019050919050565b600060208201905081810360008301526150868161504a565b9050919050565b7f4431300000000000000000000000000000000000000000000000000000000000600082015250565b60006150c3600383614931565b91506150ce8261508d565b602082019050919050565b600060208201905081810360008301526150f2816150b6565b9050919050565b7f4431350000000000000000000000000000000000000000000000000000000000600082015250565b600061512f600383614931565b915061513a826150f9565b602082019050919050565b6000602082019050818103600083015261515e81615122565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061519f826141ce565b91506151aa836141ce565b9250828210156151bd576151bc615165565b5b828203905092915050565b7f4432340000000000000000000000000000000000000000000000000000000000600082015250565b60006151fe600383614931565b9150615209826151c8565b602082019050919050565b6000602082019050818103600083015261522d816151f1565b9050919050565b7f4f7074696f6e20706172616d6174657273206e6f742073657474656420796574600082015250565b600061526a602083614931565b915061527582615234565b602082019050919050565b600060208201905081810360008301526152998161525d565b9050919050565b7f4f66666572206578706972656400000000000000000000000000000000000000600082015250565b60006152d6600d83614931565b91506152e1826152a0565b602082019050919050565b60006020820190508181036000830152615305816152c9565b9050919050565b7f4f66666572206e6f742065787069726564207965742100000000000000000000600082015250565b6000615342601683614931565b915061534d8261530c565b602082019050919050565b6000602082019050818103600083015261537181615335565b9050919050565b7f4434000000000000000000000000000000000000000000000000000000000000600082015250565b60006153ae600283614931565b91506153b982615378565b602082019050919050565b600060208201905081810360008301526153dd816153a1565b9050919050565b7f41646472657373206973206e6f74206120636f6e747261637400000000000000600082015250565b600061541a601983614931565b9150615425826153e4565b602082019050919050565b600060208201905081810360008301526154498161540d565b9050919050565b600080fd5b600080fd5b6000808585111561546e5761546d615450565b5b8386111561547f5761547e615455565b5b6001850283019150848603905094509492505050565b61549e81614281565b81146154a957600080fd5b50565b6000813590506154bb81615495565b92915050565b6000602082840312156154d7576154d6614109565b5b60006154e5848285016154ac565b91505092915050565b600080600080600060a0868803121561550a57615509614109565b5b6000615518888289016141ef565b9550506020615529888289016141ef565b945050604061553a888289016141ef565b935050606061554b888289016141ef565b925050608061555c888289016141ef565b9150509295509295909350565b7f4431390000000000000000000000000000000000000000000000000000000000600082015250565b600061559f600383614931565b91506155aa82615569565b602082019050919050565b600060208201905081810360008301526155ce81615592565b9050919050565b7f4432320000000000000000000000000000000000000000000000000000000000600082015250565b600061560b600383614931565b9150615616826155d5565b602082019050919050565b6000602082019050818103600083015261563a816155fe565b9050919050565b7f4432300000000000000000000000000000000000000000000000000000000000600082015250565b6000615677600383614931565b915061568282615641565b602082019050919050565b600060208201905081810360008301526156a68161566a565b9050919050565b7f4432310000000000000000000000000000000000000000000000000000000000600082015250565b60006156e3600383614931565b91506156ee826156ad565b602082019050919050565b60006020820190508181036000830152615712816156d6565b9050919050565b7f4f7074696f6e20646f6573206e6f74206578697374732e000000000000000000600082015250565b600061574f601783614931565b915061575a82615719565b602082019050919050565b6000602082019050818103600083015261577e81615742565b9050919050565b7f4431360000000000000000000000000000000000000000000000000000000000600082015250565b60006157bb600383614931565b91506157c682615785565b602082019050919050565b600060208201905081810360008301526157ea816157ae565b9050919050565b60006157fc826141ce565b9150615807836141ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561583c5761583b615165565b5b828201905092915050565b7f4431340000000000000000000000000000000000000000000000000000000000600082015250565b600061587d600383614931565b915061588882615847565b602082019050919050565b600060208201905081810360008301526158ac81615870565b9050919050565b600081519050919050565b60006158c9826158b3565b6158d38185614931565b93506158e3818560208601614e3b565b6158ec81614e6e565b840191505092915050565b6000602082019050818103600083015261591181846158be565b90509291505056fea264697066735822122060d572fe1920f91d272e030711aff2a90b56cf7f0d1675c59a4b6be61e6c668664736f6c634300080a0033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "buyOption(uint256)": {
          "details": "change participator address to msg.sender and delist the option from secondary marketIf asset type is  not ERC20 revert and handle this functionality using receive hooks",
          "params": {
            "optionId": "ID of the option"
          }
        },
        "delistOption(uint256)": {
          "details": "sets listed field of option to false in option mapping, only callable by the participator",
          "params": {
            "optionId": "ID of the option"
          }
        },
        "exerciseOption(uint256)": {
          "details": "transfers the counter assets to contract and transfers the colleteral to msg.sender only callable by the participatorif asset type is not ERC20 handle this functionality with receive hooks using calldata",
          "params": {
            "optionId": "ID of the option"
          }
        },
        "listOption(uint256,address,uint256,uint256)": {
          "details": "sets listed field of option to true, asset address and amount in option mapping",
          "params": {
            "optionId": "ID of the option, asset Address of the asset that seller wants to receive, amount Amount of asset"
          }
        },
        "offerOption(address,address,address,uint256,uint256,uint256)": {
          "details": "locks the colleteral, save the OptionSpecs to mapping with optionId and emits OfferEvent",
          "params": {
            "colleteral": "Address of colleteral asset, counterAsset Address of counter asset, ",
            "premiumAsset": "Address of premium asset, amountOfColleteral Amount of colleteral to be locked and promised"
          }
        },
        "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
          "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
          "params": {
            "data": "Additional data with no specified format",
            "from": "The address which previously owned the token",
            "ids": "An array containing ids of each token being transferred (order and length must match values array)",
            "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
            "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
          },
          "returns": {
            "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
          }
        },
        "onERC1155Received(address,address,uint256,uint256,bytes)": {
          "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
          "params": {
            "data": "Additional data with no specified format",
            "from": "The address which previously owned the token",
            "id": "The ID of the token being transferred",
            "operator": "The address which initiated the transfer (i.e. msg.sender)",
            "value": "The amount of tokens being transferred"
          },
          "returns": {
            "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
          }
        },
        "onERC721Received(address,address,uint256,bytes)": {
          "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
        },
        "participateOption(uint256)": {
          "details": "transfers premium asset to contract, sets isParticipated to true and participator to msg.sender options mapping",
          "params": {
            "optionId": "ID of the option"
          }
        },
        "refundColleteral(uint256)": {
          "details": "refund the colleteral only if option is not participated or option expires worthless",
          "params": {
            "optionId": "ID of the option"
          }
        },
        "withdraw(address,uint256,uint256)": {
          "details": "transfer the token that option seller should receive",
          "params": {
            "amount": "Amount of thw token received",
            "asset": "Address of the token to receive"
          }
        },
        "withdrawCA(uint256)": {
          "details": "transfer the counter asset to initiator only if option is exercised",
          "params": {
            "optionId": "ID of the option, receiver Address of buyer of the option  contract"
          }
        },
        "withdrawPremium(uint256)": {
          "details": "transfers the premium asset if there is a participant in option contract only callable by the option initiator",
          "params": {
            "optionId": "ID of the option"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "buyOption(uint256)": {
          "notice": "buy the option from secondary market"
        },
        "delistOption(uint256)": {
          "notice": "delists the option from secondary market"
        },
        "exerciseOption(uint256)": {
          "notice": "exercies the option"
        },
        "listOption(uint256,address,uint256,uint256)": {
          "notice": "list the option in secondary market"
        },
        "offerOption(address,address,address,uint256,uint256,uint256)": {
          "notice": "publish an offer for the option contract"
        },
        "participateOption(uint256)": {
          "notice": "participate in option contract by paying the option premium"
        },
        "refundColleteral(uint256)": {
          "notice": "withdraw colleteral only if no ones participates in offer period or option expires worthless"
        },
        "withdraw(address,uint256,uint256)": {
          "notice": "withdraw the amount that seller of the option should receive"
        },
        "withdrawCA(uint256)": {
          "notice": "transfers the counter asset to caller"
        },
        "withdrawPremium(uint256)": {
          "notice": "withdraw the option premium "
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 5541,
          "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
          "label": "counter",
          "offset": 0,
          "slot": "0",
          "type": "t_struct(Counter)4730_storage"
        },
        {
          "astId": 5552,
          "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
          "label": "options",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_uint256,t_struct(Option)5107_storage)"
        },
        {
          "astId": 5557,
          "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
          "label": "optionDetails",
          "offset": 0,
          "slot": "2",
          "type": "t_mapping(t_uint256,t_struct(OptionDetails)5130_storage)"
        },
        {
          "astId": 5563,
          "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
          "label": "withdrawAllowance",
          "offset": 0,
          "slot": "3",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_uint256,t_struct(Option)5107_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct IOpWiz.Option)",
          "numberOfBytes": "32",
          "value": "t_struct(Option)5107_storage"
        },
        "t_mapping(t_uint256,t_struct(OptionDetails)5130_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct IOpWiz.OptionDetails)",
          "numberOfBytes": "32",
          "value": "t_struct(OptionDetails)5130_storage"
        },
        "t_struct(Counter)4730_storage": {
          "encoding": "inplace",
          "label": "struct Counters.Counter",
          "members": [
            {
              "astId": 4729,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "_value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "32"
        },
        "t_struct(Option)5107_storage": {
          "encoding": "inplace",
          "label": "struct IOpWiz.Option",
          "members": [
            {
              "astId": 5086,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "initiator",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 5088,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "participant",
              "offset": 0,
              "slot": "1",
              "type": "t_address"
            },
            {
              "astId": 5090,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "colleteral",
              "offset": 0,
              "slot": "2",
              "type": "t_address"
            },
            {
              "astId": 5092,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "counterAsset",
              "offset": 0,
              "slot": "3",
              "type": "t_address"
            },
            {
              "astId": 5094,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "premiumAsset",
              "offset": 0,
              "slot": "4",
              "type": "t_address"
            },
            {
              "astId": 5096,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "indexOfColleteral",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256"
            },
            {
              "astId": 5098,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "indexOfCounter",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            },
            {
              "astId": 5100,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "indexOfPremium",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256"
            },
            {
              "astId": 5102,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "amountOfColleteral",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256"
            },
            {
              "astId": 5104,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "amountOfCA",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256"
            },
            {
              "astId": 5106,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "premiumAmount",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "352"
        },
        "t_struct(OptionDetails)5130_storage": {
          "encoding": "inplace",
          "label": "struct IOpWiz.OptionDetails",
          "members": [
            {
              "astId": 5109,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "listAsset",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 5111,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "indexOfListAsset",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 5113,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "offerEnd",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 5115,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "optionExpiry",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 5117,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "listAmount",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256"
            },
            {
              "astId": 5119,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "colleteralType",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8"
            },
            {
              "astId": 5121,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "counterAssetType",
              "offset": 1,
              "slot": "5",
              "type": "t_uint8"
            },
            {
              "astId": 5123,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "listAssetType",
              "offset": 2,
              "slot": "5",
              "type": "t_uint8"
            },
            {
              "astId": 5125,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "premiumAssetType",
              "offset": 3,
              "slot": "5",
              "type": "t_uint8"
            },
            {
              "astId": 5127,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "isListed",
              "offset": 4,
              "slot": "5",
              "type": "t_bool"
            },
            {
              "astId": 5129,
              "contract": "contracts/OpWiz/OpWiz.sol:OpWiz",
              "label": "exercised",
              "offset": 5,
              "slot": "5",
              "type": "t_bool"
            }
          ],
          "numberOfBytes": "192"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        },
        "t_uint8": {
          "encoding": "inplace",
          "label": "uint8",
          "numberOfBytes": "1"
        }
      }
    }
  }